<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArduinoPStruct: /home/davec/repo/ArduinoPStruct/mega/wrap.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(function() { init_search(); });
/* @license-end */
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="doxygenstyle.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ArduinoPStruct
   &#160;<span id="projectnumber">release_100-4795f83 (git)</span>
   </div>
   <div id="projectbrief">Library for accessing flash with ware levelling, supporting Arduino and OpenSTM32 (GPL).</div>
  </td>
   <td>        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
</td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('mega_2wrap_8h_source.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">wrap.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="mega_2wrap_8h.htm">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * \file</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> * MCU wrapper classes for AVR8 Mega peripherals</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * PROJECT: PStruct library</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * TARGET SYSTEM: Arduino, AVR</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160; </div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#ifndef CMEDIAWRAP_H</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#define CMEDIAWRAP_H</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160; </div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#if defined(ARDUINO_ARCH_AVR)</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160; </div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="media_8h.htm">media.h</a>&quot;</span>                <span class="comment">// nPersist base</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160; </div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">// these are what we are wrapping...</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="mega_2flash_8h.htm">mega/flash.h</a>&quot;</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="sw_2crc_8h.htm">sw/crc.h</a>&quot;</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160; </div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160; </div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="keyword">namespace </span>wrap {</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> * Wrapper for MCU specialised API to EEPROM module and CRC.  Each media type </span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment"> * requires a different wrapper</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment"> * \tparam PSZ EEPROM page size (Bytes).  This is made up for the AVR EEPROM to suit structure storage size</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="keyword">template</span>&lt;u<span class="keywordtype">int</span>16_t PSZ&gt;</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="keyword">class </span>Ee : <span class="keyword">public</span> <a class="code" href="classpersist_1_1_media.htm">persist::Media</a>, <span class="keyword">protected</span> swimp::Crc {</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    uint32_t GetPageSize()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;        <span class="keywordflow">return</span> PSZ;</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    }</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160; </div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    uint32_t GetSize()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        <span class="keywordflow">return</span> E2END+1;</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    }</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160; </div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    uint32_t* <span class="keyword">const</span> GetStart()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    }</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160; </div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    uint32_t* <span class="keyword">const</span> GetEnd()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        <span class="keywordflow">return</span> GetStart() + (GetSize()&gt;&gt;2);</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    }</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160; </div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    <span class="keywordtype">bool</span> Program(<span class="keyword">const</span> uint32_t* buffer, <span class="keyword">const</span> uint32_t* data, <span class="keyword">const</span> int16_t size_u32,</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;                                <span class="keyword">const</span> uint32_t page_size_u32, <span class="keyword">const</span> <span class="keywordtype">bool</span> use_lock) {</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        <span class="comment">// For realtime os, add lock as required</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        <span class="keywordtype">bool</span> ok = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        uint32_t *b = <span class="keyword">const_cast&lt;</span>uint32_t*<span class="keyword">&gt;</span>(buffer);</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        uint32_t l = <span class="keyword">static_cast&lt;</span>uint32_t<span class="keyword">&gt;</span>(size_u32), i, v;</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160; </div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        (void)page_size_u32;</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        (void)use_lock;</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160; </div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        <span class="comment">// Program/verify loop, bomb out on fail</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        <span class="keywordflow">for</span>(i=0; i&lt;l; i++) {</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;            eeprom_update_dword(&amp;b[i],data[i]);</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;            v = eeprom_read_dword(&amp;b[i]);</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;            <span class="keywordflow">if</span> (v != data[i]) {</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;                ok = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            }</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        }</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160; </div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <span class="keywordflow">return</span> ok;</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    } <span class="comment">// Program(...)</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        </div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keywordtype">bool</span> Read(<span class="keyword">const</span> uint32_t *buffer, <span class="keyword">const</span> uint32_t *data, <span class="keyword">const</span> int16_t size_u32) {</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        eeprom_read_block(<span class="keyword">const_cast&lt;</span>uint32_t*<span class="keyword">&gt;</span>(data), <span class="keyword">const_cast&lt;</span>uint32_t*<span class="keyword">&gt;</span>(buffer), size_u32*<span class="keyword">sizeof</span>(uint32_t));</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160; </div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    } <span class="comment">// Read(...)</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160; </div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    uint32_t Crc(<span class="keyword">const</span> uint32_t *buffer, <span class="keyword">const</span> uint16_t size_u16) {</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        <span class="keywordflow">return</span> swimp::Crc::Generate(buffer, <span class="keyword">static_cast&lt;</span>uint32_t<span class="keyword">&gt;</span>(size_u16));</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    }</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;}; <span class="comment">// class Ee</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160; </div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment"></span> </div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment">/**</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment"> * Wrapper for MCU specialised API to flash module and CRC.  Each media type </span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment"> * requires a different wrapper</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="keyword">class </span>Flash : <span class="keyword">public</span> <a class="code" href="classpersist_1_1_media.htm">persist::Media</a>, <span class="keyword">protected</span> swimp::Crc {</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        uint32_t <a class="code" href="classwrap_1_1_flash.htm#a17b56fd55b9c6a215e93084d40338e1f">GetPageSize</a>()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            <span class="keywordflow">return</span> SPM_PAGESIZE;</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        }</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        </div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        uint32_t <a class="code" href="classwrap_1_1_flash.htm#af65fb780f91a18ad6bd186d8d5ade80e">GetSize</a>()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            <span class="keywordflow">return</span> avr8mega::Flash::flash_size;</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        }</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        </div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        uint32_t* <span class="keyword">const</span> <a class="code" href="classwrap_1_1_flash.htm#a620f093e1380a07912ee003126d15f2d">GetStart</a>()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">reinterpret_cast&lt;</span>uint32_t *<span class="keyword">&gt;</span>(<span class="keyword">const_cast&lt;</span>uint16_t*<span class="keyword">&gt;</span>(avr8mega::Flash::flash_start));</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        }</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        </div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        uint32_t* <span class="keyword">const</span> <a class="code" href="classwrap_1_1_flash.htm#ab7069550a20bff1e183b7844a30933c1">GetEnd</a>()<span class="keyword"> const </span>{</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">reinterpret_cast&lt;</span>uint32_t *<span class="keyword">&gt;</span>(<span class="keyword">const_cast&lt;</span>uint16_t*<span class="keyword">&gt;</span>(avr8mega::Flash::flash_end));</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        }</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160; </div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        <span class="keywordtype">bool</span> <a class="code" href="classwrap_1_1_flash.htm#a9f63b49ec8709539716827058b425518">Program</a>(<span class="keyword">const</span> uint32_t* buffer, <span class="keyword">const</span> uint32_t* data, <span class="keyword">const</span> int16_t size_u32,</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                                <span class="keyword">const</span> uint32_t page_size_u32, <span class="keyword">const</span> <span class="keywordtype">bool</span> use_lock) {</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            <span class="keywordflow">return</span> avr8mega::Flash::Program(<span class="keyword">reinterpret_cast&lt;</span>uint16_t*<span class="keyword">&gt;</span>(<span class="keyword">const_cast&lt;</span>uint32_t*<span class="keyword">&gt;</span>(buffer)), \</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                                            <span class="keyword">reinterpret_cast&lt;</span>uint16_t*<span class="keyword">&gt;</span>(<span class="keyword">const_cast&lt;</span>uint32_t*<span class="keyword">&gt;</span>(data)), size_u32*<span class="keyword">sizeof</span>(uint32_t), page_size_u32*<span class="keyword">sizeof</span>(uint32_t));</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        }</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        </div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        <span class="keywordtype">bool</span> <a class="code" href="classwrap_1_1_flash.htm#a285ef9df804e88957ca716566f2ef089">Read</a>(<span class="keyword">const</span> uint32_t* buffer, <span class="keyword">const</span> uint32_t *data, <span class="keyword">const</span> int16_t sizeu32) {</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;            <span class="keywordflow">return</span> avr8mega::Flash::Read(<span class="keyword">reinterpret_cast&lt;</span>uint16_t*<span class="keyword">&gt;</span>(<span class="keyword">const_cast&lt;</span>uint32_t*<span class="keyword">&gt;</span>(buffer)), \</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                                            <span class="keyword">reinterpret_cast&lt;</span>uint16_t*<span class="keyword">&gt;</span>(<span class="keyword">const_cast&lt;</span>uint32_t*<span class="keyword">&gt;</span>(data)), sizeu32*<span class="keyword">sizeof</span>(uint32_t));</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        }</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        </div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        uint32_t <a class="code" href="classwrap_1_1_flash.htm#a2ac26ff942c344355fab71c0d9bfd52b">Crc</a>(<span class="keyword">const</span> uint32_t *buffer, <span class="keyword">const</span> uint16_t length_u32) {</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            <span class="keywordflow">return</span> swimp::Crc::Generate(buffer, <span class="keyword">static_cast&lt;</span>uint32_t<span class="keyword">&gt;</span>(length_u32));</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        }</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;}; <span class="comment">// class Flash</span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;} <span class="comment">// namespace wrap</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160; </div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="preprocessor">#endif // ARDUINO_ARCH_AVR</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160; </div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="preprocessor">#endif // !CMEDIAWRAP_H</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="asw_2crc_8h_htm"><div class="ttname"><a href="sw_2crc_8h.htm">crc.h</a></div></div>
<div class="ttc" id="aclasspersist_1_1_media_htm"><div class="ttname"><a href="classpersist_1_1_media.htm">persist::Media</a></div><div class="ttdoc">Media description.</div><div class="ttdef"><b>Definition:</b> media.h:18</div></div>
<div class="ttc" id="aclasswrap_1_1_flash_htm_a2ac26ff942c344355fab71c0d9bfd52b"><div class="ttname"><a href="classwrap_1_1_flash.htm#a2ac26ff942c344355fab71c0d9bfd52b">wrap::Flash::Crc</a></div><div class="ttdeci">uint32_t Crc(const uint32_t *buffer, const uint16_t size_u16)</div><div class="ttdoc">CRC generator helper.</div><div class="ttdef"><b>Definition:</b> wrap.h:53</div></div>
<div class="ttc" id="aclasswrap_1_1_flash_htm_a620f093e1380a07912ee003126d15f2d"><div class="ttname"><a href="classwrap_1_1_flash.htm#a620f093e1380a07912ee003126d15f2d">wrap::Flash::GetStart</a></div><div class="ttdeci">uint32_t *const GetStart() const</div><div class="ttdoc">Get start location of media.</div><div class="ttdef"><b>Definition:</b> wrap.h:34</div></div>
<div class="ttc" id="amega_2flash_8h_htm"><div class="ttname"><a href="mega_2flash_8h.htm">flash.h</a></div></div>
<div class="ttc" id="aclasswrap_1_1_flash_htm_a285ef9df804e88957ca716566f2ef089"><div class="ttname"><a href="classwrap_1_1_flash.htm#a285ef9df804e88957ca716566f2ef089">wrap::Flash::Read</a></div><div class="ttdeci">bool Read(const uint32_t *buffer, const uint32_t *data, const int16_t size_u32)</div><div class="ttdoc">Read media data.</div><div class="ttdef"><b>Definition:</b> wrap.h:48</div></div>
<div class="ttc" id="amedia_8h_htm"><div class="ttname"><a href="media_8h.htm">media.h</a></div></div>
<div class="ttc" id="aclasswrap_1_1_flash_htm_ab7069550a20bff1e183b7844a30933c1"><div class="ttname"><a href="classwrap_1_1_flash.htm#ab7069550a20bff1e183b7844a30933c1">wrap::Flash::GetEnd</a></div><div class="ttdeci">uint32_t *const GetEnd() const</div><div class="ttdoc">Get end location of media.</div><div class="ttdef"><b>Definition:</b> wrap.h:38</div></div>
<div class="ttc" id="aclasswrap_1_1_flash_htm_af65fb780f91a18ad6bd186d8d5ade80e"><div class="ttname"><a href="classwrap_1_1_flash.htm#af65fb780f91a18ad6bd186d8d5ade80e">wrap::Flash::GetSize</a></div><div class="ttdeci">uint32_t GetSize() const</div><div class="ttdoc">Get media storage size.</div><div class="ttdef"><b>Definition:</b> wrap.h:30</div></div>
<div class="ttc" id="aclasswrap_1_1_flash_htm_a9f63b49ec8709539716827058b425518"><div class="ttname"><a href="classwrap_1_1_flash.htm#a9f63b49ec8709539716827058b425518">wrap::Flash::Program</a></div><div class="ttdeci">bool Program(const uint32_t *buffer, const uint32_t *data, const int16_t size_u32, const uint32_t page_size_u32, const bool use_lock)</div><div class="ttdoc">Program media with given data.</div><div class="ttdef"><b>Definition:</b> wrap.h:42</div></div>
<div class="ttc" id="aclasswrap_1_1_flash_htm_a17b56fd55b9c6a215e93084d40338e1f"><div class="ttname"><a href="classwrap_1_1_flash.htm#a17b56fd55b9c6a215e93084d40338e1f">wrap::Flash::GetPageSize</a></div><div class="ttdeci">uint32_t GetPageSize() const</div><div class="ttdoc">Get media page size.</div><div class="ttdef"><b>Definition:</b> wrap.h:26</div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_4a36dd5b559ced8d937dd0aaf826cbd3.htm">mega</a></li><li class="navelem"><a class="el" href="mega_2wrap_8h.htm">wrap.h</a></li>
    <li class="footer">Generated on Mon Jan 1 2024 12:19:31 for ArduinoPStruct by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
