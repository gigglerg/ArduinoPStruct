<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArduinoPStruct: wrap::Flash Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(function() { init_search(); });
/* @license-end */
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="doxygenstyle.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ArduinoPStruct
   &#160;<span id="projectnumber">release_100-a9087b5 (git)</span>
   </div>
   <div id="projectbrief">Library for accessing flash with ware levelling, supporting Arduino and OpenSTM32 (GPL).</div>
  </td>
   <td>        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
</td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classwrap_1_1_flash.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="classwrap_1_1_flash-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">wrap::Flash Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Wrapper for MCU specialised API to flash module and CRC.  
 <a href="classwrap_1_1_flash.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="mega_2wrap_8h_source.htm">wrap.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a17b56fd55b9c6a215e93084d40338e1f"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classwrap_1_1_flash.htm#a17b56fd55b9c6a215e93084d40338e1f">GetPageSize</a> () const</td></tr>
<tr class="memdesc:a17b56fd55b9c6a215e93084d40338e1f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get media page size.  <a href="classwrap_1_1_flash.htm#a17b56fd55b9c6a215e93084d40338e1f">More...</a><br /></td></tr>
<tr class="separator:a17b56fd55b9c6a215e93084d40338e1f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af65fb780f91a18ad6bd186d8d5ade80e"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classwrap_1_1_flash.htm#af65fb780f91a18ad6bd186d8d5ade80e">GetSize</a> () const</td></tr>
<tr class="memdesc:af65fb780f91a18ad6bd186d8d5ade80e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get media storage size.  <a href="classwrap_1_1_flash.htm#af65fb780f91a18ad6bd186d8d5ade80e">More...</a><br /></td></tr>
<tr class="separator:af65fb780f91a18ad6bd186d8d5ade80e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a620f093e1380a07912ee003126d15f2d"><td class="memItemLeft" align="right" valign="top">uint32_t *const&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classwrap_1_1_flash.htm#a620f093e1380a07912ee003126d15f2d">GetStart</a> () const</td></tr>
<tr class="memdesc:a620f093e1380a07912ee003126d15f2d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get start location of media.  <a href="classwrap_1_1_flash.htm#a620f093e1380a07912ee003126d15f2d">More...</a><br /></td></tr>
<tr class="separator:a620f093e1380a07912ee003126d15f2d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab7069550a20bff1e183b7844a30933c1"><td class="memItemLeft" align="right" valign="top">uint32_t *const&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classwrap_1_1_flash.htm#ab7069550a20bff1e183b7844a30933c1">GetEnd</a> () const</td></tr>
<tr class="memdesc:ab7069550a20bff1e183b7844a30933c1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get end location of media.  <a href="classwrap_1_1_flash.htm#ab7069550a20bff1e183b7844a30933c1">More...</a><br /></td></tr>
<tr class="separator:ab7069550a20bff1e183b7844a30933c1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9f63b49ec8709539716827058b425518"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classwrap_1_1_flash.htm#a9f63b49ec8709539716827058b425518">Program</a> (const uint32_t *buffer, const uint32_t *data, const int16_t size_u32, const uint32_t page_size_u32, const bool use_lock)</td></tr>
<tr class="memdesc:a9f63b49ec8709539716827058b425518"><td class="mdescLeft">&#160;</td><td class="mdescRight">Program media with given data.  <a href="classwrap_1_1_flash.htm#a9f63b49ec8709539716827058b425518">More...</a><br /></td></tr>
<tr class="separator:a9f63b49ec8709539716827058b425518"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1bb6d06d2ae4f7c75690dc9b3b38ff97"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classwrap_1_1_flash.htm#a1bb6d06d2ae4f7c75690dc9b3b38ff97">Read</a> (const uint32_t *buffer, const uint32_t *data, const int16_t sizeu32)</td></tr>
<tr class="memdesc:a1bb6d06d2ae4f7c75690dc9b3b38ff97"><td class="mdescLeft">&#160;</td><td class="mdescRight">Read media data.  <a href="classwrap_1_1_flash.htm#a1bb6d06d2ae4f7c75690dc9b3b38ff97">More...</a><br /></td></tr>
<tr class="separator:a1bb6d06d2ae4f7c75690dc9b3b38ff97"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a57e09512c082597dd93c510daa76d1"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classwrap_1_1_flash.htm#a9a57e09512c082597dd93c510daa76d1">Crc</a> (const uint32_t *buffer, const uint16_t length_u32)</td></tr>
<tr class="memdesc:a9a57e09512c082597dd93c510daa76d1"><td class="mdescLeft">&#160;</td><td class="mdescRight">CRC generator helper.  <a href="classwrap_1_1_flash.htm#a9a57e09512c082597dd93c510daa76d1">More...</a><br /></td></tr>
<tr class="separator:a9a57e09512c082597dd93c510daa76d1"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pro_static_methods_classswimp_1_1_crc"><td colspan="2" onclick="javascript:toggleInherit('pro_static_methods_classswimp_1_1_crc')"><img src="closed.png" alt="-"/>&#160;Static Protected Member Functions inherited from <a class="el" href="classswimp_1_1_crc.htm">swimp::Crc</a></td></tr>
<tr class="memitem:ac1c660e81605c4fa4f05025c2eb1c94b inherit pro_static_methods_classswimp_1_1_crc"><td class="memItemLeft" align="right" valign="top">static uint16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classswimp_1_1_crc.htm#ac1c660e81605c4fa4f05025c2eb1c94b">Generate</a> (const uint32_t *buffer, const uint32_t length_u32)</td></tr>
<tr class="memdesc:ac1c660e81605c4fa4f05025c2eb1c94b inherit pro_static_methods_classswimp_1_1_crc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Algorithm Poly Init RefIn RefOut XorOut <br  />
 CRC16CCITT 0x1021 0xFFFF false false 0xFFFF.  <a href="classswimp_1_1_crc.htm#ac1c660e81605c4fa4f05025c2eb1c94b">More...</a><br /></td></tr>
<tr class="separator:ac1c660e81605c4fa4f05025c2eb1c94b inherit pro_static_methods_classswimp_1_1_crc"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>Wrapper for MCU specialised API to flash module and CRC. </p>
<p>Each media type requires a different wrapper </p>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="explain_8ino-example.htm#_a1">explain.ino</a>, and <a class="el" href="pointers_8ino-example.htm#_a1">pointers.ino</a>.</dd>
</dl>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="a9a57e09512c082597dd93c510daa76d1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9a57e09512c082597dd93c510daa76d1">&#9670;&nbsp;</a></span>Crc()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">uint32_t wrap::Flash::Crc </td>
          <td>(</td>
          <td class="paramtype">const uint32_t *&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint16_t&#160;</td>
          <td class="paramname"><em>size_u16</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>CRC generator helper. </p>
<p>Primarily used as part of low level storage validation and has been exposed to allow hardware implementations or alternative algorithm.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">buffer</td><td>pointer to source data (in memory) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">size_u16</td><td>size of source data, sizeof(uint32_t) multiples </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>CRC numeric (algorithm specific) </dd></dl>

<p>Implements <a class="el" href="classpersist_1_1_media.htm#a8f4dd36f8f4bf6f409585589312315b4">persist::Media</a>.</p>

</div>
</div>
<a id="ab7069550a20bff1e183b7844a30933c1"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab7069550a20bff1e183b7844a30933c1">&#9670;&nbsp;</a></span>GetEnd()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">uint32_t* const wrap::Flash::GetEnd </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get end location of media. </p>
<dl class="section return"><dt>Returns</dt><dd>Pointer. Numeric may not represent a valid CPU address </dd></dl>

<p>Implements <a class="el" href="classpersist_1_1_media.htm#a237ecfc1ffe6a4c207664d1a16ed617f">persist::Media</a>.</p>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="pointers_8ino-example.htm#a5">pointers.ino</a>.</dd>
</dl>

</div>
</div>
<a id="a17b56fd55b9c6a215e93084d40338e1f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a17b56fd55b9c6a215e93084d40338e1f">&#9670;&nbsp;</a></span>GetPageSize()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">uint32_t wrap::Flash::GetPageSize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get media page size. </p>
<dl class="section return"><dt>Returns</dt><dd>Bytes </dd></dl>

<p>Implements <a class="el" href="classpersist_1_1_media.htm#aa5f24112ba93ac17616646b84db05431">persist::Media</a>.</p>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="pointers_8ino-example.htm#a6">pointers.ino</a>.</dd>
</dl>

</div>
</div>
<a id="af65fb780f91a18ad6bd186d8d5ade80e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af65fb780f91a18ad6bd186d8d5ade80e">&#9670;&nbsp;</a></span>GetSize()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">uint32_t wrap::Flash::GetSize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get media storage size. </p>
<p>Based upon media internal start and end pointers</p>
<dl class="section return"><dt>Returns</dt><dd>Bytes </dd></dl>

<p>Implements <a class="el" href="classpersist_1_1_media.htm#a9f7442dc2d1fc5f107b7807cf9e638a9">persist::Media</a>.</p>

</div>
</div>
<a id="a620f093e1380a07912ee003126d15f2d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a620f093e1380a07912ee003126d15f2d">&#9670;&nbsp;</a></span>GetStart()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">uint32_t* const wrap::Flash::GetStart </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get start location of media. </p>
<dl class="section return"><dt>Returns</dt><dd>Pointer. Numeric may not represent a valid CPU address </dd></dl>

<p>Implements <a class="el" href="classpersist_1_1_media.htm#ad36b37ebbaa633cc3675fb0cbe1fd236">persist::Media</a>.</p>

</div>
</div>
<a id="a9f63b49ec8709539716827058b425518"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9f63b49ec8709539716827058b425518">&#9670;&nbsp;</a></span>Program()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool wrap::Flash::Program </td>
          <td>(</td>
          <td class="paramtype">const uint32_t *&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint32_t *&#160;</td>
          <td class="paramname"><em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int16_t&#160;</td>
          <td class="paramname"><em>size_u32</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint32_t&#160;</td>
          <td class="paramname"><em>page_size_u32</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>use_lock</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Program media with given data. </p>
<p>This may be multi stage where in the case of flash, page erase(s) are required.</p>
<dl class="section note"><dt>Note</dt><dd>Implement media mutex or critical section within your own wrapper class if using an OS or tasker</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">buffer</td><td>pointer to write location on media </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">data</td><td>pointer to source data to program </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">size_u32</td><td>size of source data, sizeof(uint32_t) multiples </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">page_size_u32</td><td>page size, sizeof(uint32_t) multiples </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">use_lock</td><td>architecture specific memory region lock. If true will leave memory locked afterwards </td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">true</td><td>on success </td></tr>
    <tr><td class="paramname">false</td><td>on failure. This could be an erase or program operation that failed </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classpersist_1_1_media.htm#af5ebe9f1ca4b3f9625ef882401dd8153">persist::Media</a>.</p>

</div>
</div>
<a id="a1bb6d06d2ae4f7c75690dc9b3b38ff97"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1bb6d06d2ae4f7c75690dc9b3b38ff97">&#9670;&nbsp;</a></span>Read()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool wrap::Flash::Read </td>
          <td>(</td>
          <td class="paramtype">const uint32_t *&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint32_t *&#160;</td>
          <td class="paramname"><em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int16_t&#160;</td>
          <td class="paramname"><em>size_u32</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Read media data. </p>
<dl class="section note"><dt>Note</dt><dd>Implement media mutex or critical section within your own wrapper class if using an OS or tasker</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">buffer</td><td>pointer to source location on media </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">data</td><td>pointer to destination for read data </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">size_u32</td><td>size of source data, sizeof(uint32_t) multiples </td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">true</td><td>on success </td></tr>
    <tr><td class="paramname">false</td><td>on failure. Anything from no access to media to bad buffer address </td></tr>
  </table>
  </dd>
</dl>

<p>Implements <a class="el" href="classpersist_1_1_media.htm#a364b02c5383651df3a1455080da1b371">persist::Media</a>.</p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><b>wrap</b></li><li class="navelem"><a class="el" href="classwrap_1_1_flash.htm">Flash</a></li>
    <li class="footer">Generated on Mon Jan 1 2024 12:52:09 for ArduinoPStruct by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
