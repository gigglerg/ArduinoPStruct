<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArduinoPStruct: PStruct</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(function() { init_search(); });
/* @license-end */
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="doxygenstyle.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ArduinoPStruct
   &#160;<span id="projectnumber">release_100-d7d59ac (git)</span>
   </div>
   <div id="projectbrief">Library for accessing flash with ware levelling, supporting Arduino and OpenSTM32 (GPL).</div>
  </td>
   <td>        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
</td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('index.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="PageDoc"><div class="header">
  <div class="headertitle">
<div class="title">PStruct </div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><p><b>PStruct</b> (Persistent Structure) library offers access to different flash media including on-chip flash controllers for user data storage. A simple load/save API is offered that wraps ware levelling over the top of device specific flash drivers. For new devices you'd create a wrapper class which forms a standard interface.</p>
<p>While different types of media have their own characteristics; a known problem with flash is endurance and this can be extended with a ware levelling algorithm as implemented by PStruct. PStruct stores user ADT's with cyclic redundancy check validation over multiple pages, handling restoring the most recent copy using old data as fall backs.</p>
<p>Build environments include Arduino framework and bare metal development as the library code is completely independent (excludes chip specific drivers).</p>
<p><a href="https://www.gnu.org/licenses/old-licenses/gpl-2.0.en.html">License: GPL2</a></p>
<h1>Using the library</h1>
<p>For now as this is a library, Doxygen documentation is available by the following links</p>
<ul>
<li><a href="https://gigglerg.github.io/ArduinoPStruct/release_100/avr8_html/index.htm">AVR8 documentation</a></li>
<li><a href="https://gigglerg.github.io/ArduinoPStruct/release_100/stm32_html/index.htm">STM32 documentation</a></li>
</ul>
<p>To rebuild simple use make with architecture like "make avr8" or "make stm32" from within the "./docs" folder.</p>
<h1>Requirements</h1>
<ul>
<li>Supports<ul>
<li>Arduino (<a href="http://ww1.microchip.com/downloads/en/DeviceDoc/Atmel-7810-Automotive-Microcontrollers-ATmega328P_Datasheet.pdf">AVR8 Mega single flash bank</a>) devices<ul>
<li><a href="https://www.arduino.cc/">Arduino Uno/Nano</a></li>
<li><a href="http://docs.leaflabs.com/static.leaflabs.com/pub/leaflabs/maple-docs/latest/hardware/maple-mini.html">Maple Mini</a></li>
<li>Blue Pill</li>
</ul>
</li>
<li><a href="https://www.st.com/en/microcontrollers-microprocessors/stm32-32-bit-arm-cortex-mcus.html">STM32 Cortex M series</a><ul>
<li>Requires <a href="https://github.com/stm32duino/Arduino_Core_STM32">STM32dunio Arduino Core STM32</a>, tested release 1.4.0</li>
<li>Optional use of CRC hardware</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1>Library Installation</h1>
<p>PStruct is available for installation in the [Arduino Library Manager]. Alternatively it can be downloaded from GitHub using the following:</p>
<ol type="1">
<li>Download the ZIP file from <a href="https://github.com/gigglerg/ArduinoPStruct.git">https://github.com/gigglerg/ArduinoPStruct.git</a></li>
<li>Rename the downloaded file to <code>PStruct.zip</code></li>
<li>From the Arduino IDE: Sketch -&gt; Include Library... -&gt; Add .ZIP Library...</li>
<li>Restart the Arduino IDE to see "PStruct" library with examples</li>
</ol>
<p>See the comments in the example sketches for coding use details.</p>
<h1>Using in STM32 Workbench</h1>
<p>Simple download the ZIP file as mentioned above in <a href="#Library-Installation">Library Installation</a> and decompress source files into your source tree. In Eclipse or your source editor add files from ZIP.</p>
<h2>Include library and wrapper drivers</h2>
<div class="fragment"><div class="line"><span class="comment">// Include media storage access base class and user api</span></div>
<div class="line"><span class="preprocessor">#include &quot;<a class="code" href="media_8h.htm">media.h</a>&quot;</span></div>
<div class="line"><span class="preprocessor">#include &quot;<a class="code" href="struct_8h.htm">struct.h</a>&quot;</span></div>
<div class="line"> </div>
<div class="line"><span class="comment">// Include wrapper for device specific drivers.  For STM32F103</span></div>
<div class="line"><span class="preprocessor">#include &quot;<a class="code" href="stm32_2f103_2wrap_8h.htm">stm32/f103/wrap.h</a>&quot;</span></div>
<div class="line"> </div>
<div class="line"><span class="comment">// Or</span></div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#include &quot;<a class="code" href="mega_2wrap_8h.htm">mega/wrap.h</a>&quot;</span></div>
<div class="line"> </div>
<div class="line"><span class="comment">// You may have to write your own wrapper.  Look at the existing wrappers for coding support.</span></div>
<div class="line"> </div>
<div class="line"><span class="comment">// Now create an instance of media wrapper (the low level driver)</span></div>
<div class="line"><a class="code" href="classwrap_1_1_flash.htm">wrap::Flash</a> media;</div>
</div><!-- fragment --><p>If you want to use pointers to save on memory footprint:</p>
<div class="fragment"><div class="line"><span class="preprocessor">#define PERSISTSTRUCT_POINTERS</span></div>
<div class="line"><span class="preprocessor">#include &quot;<a class="code" href="struct_8h.htm">struct.h</a>&quot;</span></div>
<div class="line"> </div>
<div class="line"><span class="comment">// API for load and save have changed and you&#39;ll have to use get(...)</span></div>
</div><!-- fragment --><h2>Creating your ADT</h2>
<p>Whatever data you want to store, create it as a type and populate with default data (optional):</p>
<div class="fragment"><div class="line"><span class="comment">// Here is my ADT that I want stored</span></div>
<div class="line"><span class="keyword">typedef</span> <span class="keyword">struct </span>{</div>
<div class="line">    uint32_t value;</div>
<div class="line">    int16_t  some_other_value;</div>
<div class="line">    ...</div>
<div class="line">    <span class="keywordtype">char</span>     str[13];</div>
<div class="line">}my_data_t;</div>
<div class="line"> </div>
<div class="line"><span class="comment">// Some data I want stored, it doesn&#39;t have to be global.  populate defaults (optional)</span></div>
<div class="line">my_data_t adt = {</div>
<div class="line">    .value = 0x12345678,</div>
<div class="line">    .some_other_value = -178,</div>
<div class="line">    .str = { <span class="stringliteral">&quot;HELLOWORLD\0&quot;</span> }</div>
<div class="line">};</div>
</div><!-- fragment --><h2>Now the PStruct instance for data handling</h2>
<p>You can other more than one instance, using the same or different media and use them to work with various types of data stored a different locations. The most obvious use is for device configuration information that may or may not change.</p>
<div class="fragment"><div class="line"><span class="comment">// Create PStruct instance.  There are a couple of constructors and this one creates based upon defined</span></div>
<div class="line"><span class="comment">// start and end locations in storage medium.  Careful, here we are allocating storage at end of on-chip</span></div>
<div class="line"><span class="comment">// flash which is fine but remember you could overwrite the vector table if you put it at the start.</span></div>
<div class="line"><span class="comment">// See examples for further details, including how to specify start by compiler variables rather than </span></div>
<div class="line"><span class="comment">// absolute addresses and control via number of ware levels.</span></div>
<div class="line"><span class="preprocessor">#define PAGES 10 // allocate n physical pages</span></div>
<div class="line"><a class="code" href="classpersist_1_1_struct.htm">persist::Struct&lt;adt&gt;</a> adt_access(media, media.getEnd() - (media.getPageSize() * PAGES), PAGES);</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">int</span> main(...) {</div>
<div class="line">    <span class="comment">// attempt load ADT...</span></div>
<div class="line">    <span class="keywordflow">if</span> (adt_access.load(adt)) {</div>
<div class="line">        <span class="comment">// success</span></div>
<div class="line">    }<span class="keywordflow">else</span> {</div>
<div class="line">        <span class="comment">// ADT load fail.  assume we have never written it and use default</span></div>
<div class="line">        </div>
<div class="line">        <span class="comment">// save ADT</span></div>
<div class="line">        <span class="keywordflow">if</span> (adt_access.save(adt,<span class="keyword">true</span> <span class="comment">/* force save without previous load */</span>)) {</div>
<div class="line">            Serial.println(<span class="stringliteral">&quot;Write success&quot;</span>);</div>
<div class="line">        }<span class="keywordflow">else</span> {</div>
<div class="line">            Serial.println(<span class="stringliteral">&quot;Write failed.  assume device worn out!&quot;</span>);</div>
<div class="line">        }</div>
<div class="line">    }</div>
<div class="line"> </div>
<div class="line">    <span class="comment">// now use ADT</span></div>
<div class="line">    ...</div>
<div class="line">}</div>
</div><!-- fragment --><p>Or you can let the compiler and linker resolve location within flash</p>
<div class="fragment"><div class="line"><span class="comment">// You create this macro, name isnt important but the levels should be changed to meet</span></div>
<div class="line"><span class="comment">// application requirements.  MCU datasheet covers specific flash </span></div>
<div class="line"><span class="preprocessor">#define WARELEVELS 4</span></div>
<div class="line"> </div>
<div class="line"><span class="comment">// Data you want persistent storage of...</span></div>
<div class="line"><span class="keyword">typedef</span> <span class="keyword">struct </span>{</div>
<div class="line">    uint32_t hw_version;</div>
<div class="line">    uint32_t crc;</div>
<div class="line">    uint16_t another_field;</div>
<div class="line">    uint16_t something_else;</div>
<div class="line">    uint32_t you_decide[2];</div>
<div class="line">}appdata_t;</div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#if defined(ARDUINO_ARCH_AVR)</span></div>
<div class="line"><span class="comment">// For AVR core - Arduino</span></div>
<div class="line"><span class="keyword">const</span> uint8_t g_flash[<a class="code" href="struct_8h.htm#aaeac7b7b16deaf1e5b406dc283698328">PERSISTSTRUCT_SIZE</a>(appdata_t,WARELEVELS)] PROGMEM <a class="code" href="explain_8ino.htm#a46c1880136135e630c5211a1210a5c86">__attribute__</a> ((aligned (<a class="code" href="mega_2flash_8h.htm#a1317f7d8624774499e4fa8a8b079454a">AVR_FLASH_PAGE_SIZE</a>))) = { 0xff };</div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#elif defined(ARDUINO_ARCH_STM32)</span></div>
<div class="line"><span class="comment">// For STM32 core - Maplemini, Blue pill</span></div>
<div class="line"><span class="keyword">const</span> uint8_t g_flash[<a class="code" href="struct_8h.htm#aaeac7b7b16deaf1e5b406dc283698328">PERSISTSTRUCT_SIZE</a>(appdata_t,STM32F103X_FLASH_PAGE_SIZE,WARELEVELS)] <a class="code" href="explain_8ino.htm#a46c1880136135e630c5211a1210a5c86">__attribute__</a> ((aligned (STM32F103X_FLASH_PAGE_SIZE))) = { 0xff };</div>
<div class="line"><span class="preprocessor">#endif</span></div>
<div class="line"> </div>
<div class="line"><span class="comment">// MCU Media access instance...</span></div>
<div class="line"><a class="code" href="classwrap_1_1_flash.htm">wrap::Flash</a> <a class="code" href="avr__eprom_8ino.htm#a26083b91bef2d316a1d9d8da0eb063f7">g_media</a>;</div>
<div class="line"> </div>
<div class="line"><span class="comment">// Create PStruct instance that you will use to access your most recently saved appdata_t stored in memory allocated to g_flash</span></div>
<div class="line"><a class="code" href="classpersist_1_1_struct.htm">persist::Struct&lt;appdata_t&gt;</a> g_appdata(<a class="code" href="avr__eprom_8ino.htm#a26083b91bef2d316a1d9d8da0eb063f7">g_media</a>, <span class="keyword">reinterpret_cast&lt;</span>uint32_t*<span class="keyword">&gt;</span>(<span class="keyword">const_cast&lt;</span>uint8_t*<span class="keyword">&gt;</span>(&amp;g_flash[0])), WARELEVELS);</div>
</div><!-- fragment --><h1>OS or Tasker</h1>
<p>Implement media locking by overriding Read and Program methods of your lower level driver wrapper class rather than poking around with PStruct itself. It might be most efficient to consider seperate read and write mutexes where access because of a write doesn't effect reads.</p>
<h1>Gotchas</h1>
<ol type="1">
<li>AVR's currently only single bank devices are supported. Larger flash memorys may require addition work to get PStruct working.</li>
<li>STM32, using STM32Cube HAL library. You will have to enable the Flash module and optionally CRC. These are done by macros specific to your project. In Arduino add file "build_opt.h" with the following line:</li>
</ol>
<div class="fragment"><div class="line">-DHAL_CRC_MODULE_ENABLED -DHAL_FLASH_MODULE_ENABLED</div>
</div><!-- fragment --><h1>Contributing</h1>
<p>Contributions to the code are welcome using the normal Github pull request workflow.</p>
<p>Please remember the small memory footprint of most micro controllers like Arduino, so try and be efficient when adding new features.</p>
<h2>Code Style</h2>
<p>When making contributions, please follow <a href="https://google.github.io/styleguide/cppguide.html">Google's code style</a> where possible to keep the codebase consistent.</p>
<ul>
<li>Indent <em>4 spaces</em>, No hard tabs</li>
<li>EOL Unix (Library code)</li>
<li>The rest is online! </li>
</ul>
</div></div><!-- PageDoc -->
</div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aavr__eprom_8ino_htm_a26083b91bef2d316a1d9d8da0eb063f7"><div class="ttname"><a href="avr__eprom_8ino.htm#a26083b91bef2d316a1d9d8da0eb063f7">g_media</a></div><div class="ttdeci">wrap::Ee&lt; persist::Struct&lt; cfg_t &gt;::GetStorageUnitSize()&gt; g_media</div><div class="ttdoc">Create your media access instance.</div><div class="ttdef"><b>Definition:</b> avr_eprom.ino:52</div></div>
<div class="ttc" id="amega_2flash_8h_htm_a1317f7d8624774499e4fa8a8b079454a"><div class="ttname"><a href="mega_2flash_8h.htm#a1317f7d8624774499e4fa8a8b079454a">AVR_FLASH_PAGE_SIZE</a></div><div class="ttdeci">#define AVR_FLASH_PAGE_SIZE</div><div class="ttdoc">Device page size in Bytes.</div><div class="ttdef"><b>Definition:</b> flash.h:56</div></div>
<div class="ttc" id="astm32_2f103_2wrap_8h_htm"><div class="ttname"><a href="stm32_2f103_2wrap_8h.htm">wrap.h</a></div></div>
<div class="ttc" id="aexplain_8ino_htm_a46c1880136135e630c5211a1210a5c86"><div class="ttname"><a href="explain_8ino.htm#a46c1880136135e630c5211a1210a5c86">__attribute__</a></div><div class="ttdeci">const uint8_t data[PERSISTSTRUCT_SIZE(config_t, AVR_FLASH_PAGE_SIZE, PSTRUCT_USE_N_WARELEVELS)] PROGMEM __attribute__((aligned(AVR_FLASH_PAGE_SIZE)))</div><div class="ttdoc">Flash allocation by compiler rather than specifying an address that may or may not be used.</div></div>
<div class="ttc" id="amega_2wrap_8h_htm"><div class="ttname"><a href="mega_2wrap_8h.htm">wrap.h</a></div></div>
<div class="ttc" id="aclasspersist_1_1_struct_htm"><div class="ttname"><a href="classpersist_1_1_struct.htm">persist::Struct</a></div><div class="ttdoc">A class offering persistent storage access to a user supplied structure with ware levelling.</div><div class="ttdef"><b>Definition:</b> struct.h:51</div></div>
<div class="ttc" id="aclasswrap_1_1_flash_htm"><div class="ttname"><a href="classwrap_1_1_flash.htm">wrap::Flash</a></div><div class="ttdoc">Wrapper for MCU specialised API to flash module and CRC.</div><div class="ttdef"><b>Definition:</b> wrap.h:86</div></div>
<div class="ttc" id="amedia_8h_htm"><div class="ttname"><a href="media_8h.htm">media.h</a></div></div>
<div class="ttc" id="astruct_8h_htm_aaeac7b7b16deaf1e5b406dc283698328"><div class="ttname"><a href="struct_8h.htm#aaeac7b7b16deaf1e5b406dc283698328">PERSISTSTRUCT_SIZE</a></div><div class="ttdeci">#define PERSISTSTRUCT_SIZE(s, ps, l)</div><div class="ttdoc">Macro should be defined in limited memory environments, giving access to private instance of custom d...</div><div class="ttdef"><b>Definition:</b> struct.h:36</div></div>
<div class="ttc" id="astruct_8h_htm"><div class="ttname"><a href="struct_8h.htm">struct.h</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="footer">Generated on Mon Jan 1 2024 16:52:54 for ArduinoPStruct by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
