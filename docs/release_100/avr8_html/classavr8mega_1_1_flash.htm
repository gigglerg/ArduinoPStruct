<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArduinoPStruct: avr8mega::Flash Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(function() { init_search(); });
/* @license-end */
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="doxygenstyle.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ArduinoPStruct
   &#160;<span id="projectnumber">release_100-a9087b5 (git)</span>
   </div>
   <div id="projectbrief">Library for accessing flash with ware levelling, supporting Arduino and OpenSTM32 (GPL).</div>
  </td>
   <td>        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
</td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classavr8mega_1_1_flash.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pub-static-attribs">Static Public Attributes</a> &#124;
<a href="classavr8mega_1_1_flash-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">avr8mega::Flash Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>A driver class offering flash access via API for AVR (MEGA) to allow for persistent data.  
 <a href="classavr8mega_1_1_flash.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="mega_2flash_8h_source.htm">flash.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:af54be9d29f3c1429503a3ccdc75406a9"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classavr8mega_1_1_flash.htm#af54be9d29f3c1429503a3ccdc75406a9">Program</a> (const uint16_t *buffer, const uint16_t *data, const int16_t size_u8, const uint16_t page_size_u8=<a class="el" href="mega_2flash_8h.htm#a1317f7d8624774499e4fa8a8b079454a">AVR_FLASH_PAGE_SIZE</a>)</td></tr>
<tr class="memdesc:af54be9d29f3c1429503a3ccdc75406a9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Device flash end address (top, non-accessible)  <a href="classavr8mega_1_1_flash.htm#af54be9d29f3c1429503a3ccdc75406a9">More...</a><br /></td></tr>
<tr class="separator:af54be9d29f3c1429503a3ccdc75406a9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6dd44bd9a666a26dc46fb20735415b18"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classavr8mega_1_1_flash.htm#a6dd44bd9a666a26dc46fb20735415b18">Read</a> (const uint16_t *buffer, uint16_t *data, const uint16_t size_u8)</td></tr>
<tr class="memdesc:a6dd44bd9a666a26dc46fb20735415b18"><td class="mdescLeft">&#160;</td><td class="mdescRight">Read page data starting at buffer to size into data.  <a href="classavr8mega_1_1_flash.htm#a6dd44bd9a666a26dc46fb20735415b18">More...</a><br /></td></tr>
<tr class="separator:a6dd44bd9a666a26dc46fb20735415b18"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aad0a3392a76053a084ab81704b990444"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classavr8mega_1_1_flash.htm#aad0a3392a76053a084ab81704b990444">Verify</a> (const uint16_t *buffer, const uint16_t *data, const uint16_t size_u8)</td></tr>
<tr class="memdesc:aad0a3392a76053a084ab81704b990444"><td class="mdescLeft">&#160;</td><td class="mdescRight">Verify given buffer in flash.  <a href="classavr8mega_1_1_flash.htm#aad0a3392a76053a084ab81704b990444">More...</a><br /></td></tr>
<tr class="separator:aad0a3392a76053a084ab81704b990444"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abeb8b8f985a29d8cd896b73c40ce4fee"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classavr8mega_1_1_flash.htm#abeb8b8f985a29d8cd896b73c40ce4fee">Write16Buffer</a> (const uint16_t *buffer, const uint16_t *data, const uint16_t size_u8, const uint16_t page_size_u8=<a class="el" href="mega_2flash_8h.htm#a1317f7d8624774499e4fa8a8b079454a">AVR_FLASH_PAGE_SIZE</a>)</td></tr>
<tr class="memdesc:abeb8b8f985a29d8cd896b73c40ce4fee"><td class="mdescLeft">&#160;</td><td class="mdescRight">Write buffer in 16bit words to flash.  <a href="classavr8mega_1_1_flash.htm#abeb8b8f985a29d8cd896b73c40ce4fee">More...</a><br /></td></tr>
<tr class="separator:abeb8b8f985a29d8cd896b73c40ce4fee"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a90df76b042d064dd2dbaa4ab8700407c"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classavr8mega_1_1_flash.htm#a90df76b042d064dd2dbaa4ab8700407c">ErasePages</a> (const uint16_t *page_address, const uint16_t pages, const uint16_t page_size_u8=<a class="el" href="mega_2flash_8h.htm#a1317f7d8624774499e4fa8a8b079454a">AVR_FLASH_PAGE_SIZE</a>)</td></tr>
<tr class="memdesc:a90df76b042d064dd2dbaa4ab8700407c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Erase N pages from given start location.  <a href="classavr8mega_1_1_flash.htm#a90df76b042d064dd2dbaa4ab8700407c">More...</a><br /></td></tr>
<tr class="separator:a90df76b042d064dd2dbaa4ab8700407c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0458ea95ee12231bfd9b592dca968b47"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classavr8mega_1_1_flash.htm#a0458ea95ee12231bfd9b592dca968b47">ErasePage</a> (const uint16_t *page_address, const uint16_t page_size_u8=<a class="el" href="mega_2flash_8h.htm#a1317f7d8624774499e4fa8a8b079454a">AVR_FLASH_PAGE_SIZE</a>)</td></tr>
<tr class="memdesc:a0458ea95ee12231bfd9b592dca968b47"><td class="mdescLeft">&#160;</td><td class="mdescRight">Erase page by given start location.  <a href="classavr8mega_1_1_flash.htm#a0458ea95ee12231bfd9b592dca968b47">More...</a><br /></td></tr>
<tr class="separator:a0458ea95ee12231bfd9b592dca968b47"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abca3fb1e1179aa83470d695a80166e65"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classavr8mega_1_1_flash.htm#abca3fb1e1179aa83470d695a80166e65">CheckErasePage</a> (const uint16_t *page_address, const uint16_t page_size_u8=<a class="el" href="mega_2flash_8h.htm#a1317f7d8624774499e4fa8a8b079454a">AVR_FLASH_PAGE_SIZE</a>)</td></tr>
<tr class="memdesc:abca3fb1e1179aa83470d695a80166e65"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check page is in erase state by given start location.  <a href="classavr8mega_1_1_flash.htm#abca3fb1e1179aa83470d695a80166e65">More...</a><br /></td></tr>
<tr class="separator:abca3fb1e1179aa83470d695a80166e65"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-attribs"></a>
Static Public Attributes</h2></td></tr>
<tr class="memitem:a87bd9cf073faacd843682f9e15b08185"><td class="memItemLeft" align="right" valign="top"><a id="a87bd9cf073faacd843682f9e15b08185"></a>
static const uint16_t&#160;</td><td class="memItemRight" valign="bottom"><b>page_size</b> = <a class="el" href="mega_2flash_8h.htm#a1317f7d8624774499e4fa8a8b079454a">AVR_FLASH_PAGE_SIZE</a></td></tr>
<tr class="separator:a87bd9cf073faacd843682f9e15b08185"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab53c40ee584d4d9cd47eb2d6fd47ce99"><td class="memItemLeft" align="right" valign="top"><a id="ab53c40ee584d4d9cd47eb2d6fd47ce99"></a>
static const uint16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classavr8mega_1_1_flash.htm#ab53c40ee584d4d9cd47eb2d6fd47ce99">flash_size</a> = <a class="el" href="mega_2flash_8h.htm#afbe22ab202e48d9f688eb8a12049461e">AVR_FLASH_SIZE</a></td></tr>
<tr class="memdesc:ab53c40ee584d4d9cd47eb2d6fd47ce99"><td class="mdescLeft">&#160;</td><td class="mdescRight">Device page size (Bytes) <br /></td></tr>
<tr class="separator:ab53c40ee584d4d9cd47eb2d6fd47ce99"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0923524a16fa83d42ee36cf21f9f12c3"><td class="memItemLeft" align="right" valign="top"><a id="a0923524a16fa83d42ee36cf21f9f12c3"></a>
static uint16_t *const&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classavr8mega_1_1_flash.htm#a0923524a16fa83d42ee36cf21f9f12c3">flash_start</a> = reinterpret_cast&lt;uint16_t* const&gt;(AVR_FLASH_START)</td></tr>
<tr class="memdesc:a0923524a16fa83d42ee36cf21f9f12c3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Device flash size (Bytes), bank0 only. <br /></td></tr>
<tr class="separator:a0923524a16fa83d42ee36cf21f9f12c3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a68ca0ea8f9020bdc848f3282f433880b"><td class="memItemLeft" align="right" valign="top"><a id="a68ca0ea8f9020bdc848f3282f433880b"></a>
static uint16_t *const&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classavr8mega_1_1_flash.htm#a68ca0ea8f9020bdc848f3282f433880b">flash_end</a> = static_cast&lt;uint16_t* const&gt;(<a class="el" href="classavr8mega_1_1_flash.htm#a0923524a16fa83d42ee36cf21f9f12c3">Flash::flash_start</a> + (<a class="el" href="classavr8mega_1_1_flash.htm#ab53c40ee584d4d9cd47eb2d6fd47ce99">Flash::flash_size</a>&gt;&gt;1))</td></tr>
<tr class="memdesc:a68ca0ea8f9020bdc848f3282f433880b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Device flash start address. <br /></td></tr>
<tr class="separator:a68ca0ea8f9020bdc848f3282f433880b"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>A driver class offering flash access via API for AVR (MEGA) to allow for persistent data. </p>
<dl class="section attention"><dt>Attention</dt><dd>This class requires Arduino bootloader and library Optiboot_flasher. Your device should have the Optiboot_flasher written to boot loader section of AVR flash. This is required due to SPI instruction and fuse settings. <a href="https://github.com/MCUdude/MiniCore/tree/master/avr/libraries/Optiboot_flasher">https://github.com/MCUdude/MiniCore/tree/master/avr/libraries/Optiboot_flasher</a> </dd></dl>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="abca3fb1e1179aa83470d695a80166e65"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abca3fb1e1179aa83470d695a80166e65">&#9670;&nbsp;</a></span>CheckErasePage()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static bool avr8mega::Flash::CheckErasePage </td>
          <td>(</td>
          <td class="paramtype">const uint16_t *&#160;</td>
          <td class="paramname"><em>page_address</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint16_t&#160;</td>
          <td class="paramname"><em>page_size_u8</em> = <code><a class="el" href="mega_2flash_8h.htm#a1317f7d8624774499e4fa8a8b079454a">AVR_FLASH_PAGE_SIZE</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Check page is in erase state by given start location. </p>
<p>The start location lower bits are masked off to pageSize</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">page_address</td><td>Pointer to destination flash address, start of page </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">page_size_u8</td><td>Page size in sizeof(uint8_t) multiples, default <a class="el" href="mega_2flash_8h.htm#a1317f7d8624774499e4fa8a8b079454a">AVR_FLASH_PAGE_SIZE</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>bool Status </dd></dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">true</td><td>when page in erase state </td></tr>
    <tr><td class="paramname">false</td><td>not all page data in erase state </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a0458ea95ee12231bfd9b592dca968b47"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a0458ea95ee12231bfd9b592dca968b47">&#9670;&nbsp;</a></span>ErasePage()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static bool avr8mega::Flash::ErasePage </td>
          <td>(</td>
          <td class="paramtype">const uint16_t *&#160;</td>
          <td class="paramname"><em>page_address</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint16_t&#160;</td>
          <td class="paramname"><em>page_size_u8</em> = <code><a class="el" href="mega_2flash_8h.htm#a1317f7d8624774499e4fa8a8b079454a">AVR_FLASH_PAGE_SIZE</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Erase page by given start location. </p>
<p>The start location lower bits are masked off to pageSize. <a class="el" href="classavr8mega_1_1_flash.htm" title="A driver class offering flash access via API for AVR (MEGA) to allow for persistent data.">Flash</a> must be unlocked</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">page_address</td><td>Pointer to destination flash address, start of page </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">page_size_u8</td><td>Page size in sizeof(uint32_t) multiples, default <a class="el" href="mega_2flash_8h.htm#a1317f7d8624774499e4fa8a8b079454a">AVR_FLASH_PAGE_SIZE</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">true</td><td>on erase page success </td></tr>
    <tr><td class="paramname">false</td><td>erase failure </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a90df76b042d064dd2dbaa4ab8700407c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a90df76b042d064dd2dbaa4ab8700407c">&#9670;&nbsp;</a></span>ErasePages()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static bool avr8mega::Flash::ErasePages </td>
          <td>(</td>
          <td class="paramtype">const uint16_t *&#160;</td>
          <td class="paramname"><em>page_address</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint16_t&#160;</td>
          <td class="paramname"><em>pages</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint16_t&#160;</td>
          <td class="paramname"><em>page_size_u8</em> = <code><a class="el" href="mega_2flash_8h.htm#a1317f7d8624774499e4fa8a8b079454a">AVR_FLASH_PAGE_SIZE</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Erase N pages from given start location. </p>
<p>The start location lower bits are masked off to pageSize. <a class="el" href="classavr8mega_1_1_flash.htm" title="A driver class offering flash access via API for AVR (MEGA) to allow for persistent data.">Flash</a> must be unlocked</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">page_address</td><td>Pointer to destination flash address, start of page </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">pages</td><td>Count for erase </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">page_size_u8</td><td>Page size in sizeof(uint8_t) multiples, default <a class="el" href="mega_2flash_8h.htm#a1317f7d8624774499e4fa8a8b079454a">AVR_FLASH_PAGE_SIZE</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">true</td><td>erase success </td></tr>
    <tr><td class="paramname">false</td><td>erase failure </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="af54be9d29f3c1429503a3ccdc75406a9"></a>
<h2 class="memtitle"><span class="permalink"><a href="#af54be9d29f3c1429503a3ccdc75406a9">&#9670;&nbsp;</a></span>Program()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static bool avr8mega::Flash::Program </td>
          <td>(</td>
          <td class="paramtype">const uint16_t *&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint16_t *&#160;</td>
          <td class="paramname"><em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int16_t&#160;</td>
          <td class="paramname"><em>size_u8</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint16_t&#160;</td>
          <td class="paramname"><em>page_size_u8</em> = <code><a class="el" href="mega_2flash_8h.htm#a1317f7d8624774499e4fa8a8b079454a">AVR_FLASH_PAGE_SIZE</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Device flash end address (top, non-accessible) </p>
<p>Program N pages starting at buffer with given data to sizeU8. Will only program if data not already written and will only erase pages if they are not in erase state. Data written is verified as part of write. If start buffer location not paged aligned, extra pages will be erased.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">buffer</td><td>Pointer to destination flash address of program </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">data</td><td>Pointer to data to write </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">size_u8</td><td>Data size of program / sizeof(uint8_t) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">page_size_u8</td><td>Device page size, multiples of sizeof(uint8_t). Default <a class="el" href="mega_2flash_8h.htm#a1317f7d8624774499e4fa8a8b079454a">AVR_FLASH_PAGE_SIZE</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">true</td><td>on program success </td></tr>
    <tr><td class="paramname">false</td><td>failure </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a6dd44bd9a666a26dc46fb20735415b18"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6dd44bd9a666a26dc46fb20735415b18">&#9670;&nbsp;</a></span>Read()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static bool avr8mega::Flash::Read </td>
          <td>(</td>
          <td class="paramtype">const uint16_t *&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint16_t *&#160;</td>
          <td class="paramname"><em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint16_t&#160;</td>
          <td class="paramname"><em>size_u8</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Read page data starting at buffer to size into data. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">buffer</td><td>Pointer to source flash address </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">data</td><td>Pointer to data, destination of read </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">size_u8</td><td>Data size / sizeof(uint8_t) </td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">true</td><td>on read success </td></tr>
    <tr><td class="paramname">false</td><td>on failure </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="aad0a3392a76053a084ab81704b990444"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aad0a3392a76053a084ab81704b990444">&#9670;&nbsp;</a></span>Verify()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static bool avr8mega::Flash::Verify </td>
          <td>(</td>
          <td class="paramtype">const uint16_t *&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint16_t *&#160;</td>
          <td class="paramname"><em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint16_t&#160;</td>
          <td class="paramname"><em>size_u8</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Verify given buffer in flash. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">buffer</td><td>Pointer to source flash address </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">data</td><td>Pointer to data to verify against </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">size_u8</td><td>Data size / sizeof(uint8_t) </td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">true</td><td>when data represents what is on media </td></tr>
    <tr><td class="paramname">false</td><td>one or more differences between data and media </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="abeb8b8f985a29d8cd896b73c40ce4fee"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abeb8b8f985a29d8cd896b73c40ce4fee">&#9670;&nbsp;</a></span>Write16Buffer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static bool avr8mega::Flash::Write16Buffer </td>
          <td>(</td>
          <td class="paramtype">const uint16_t *&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint16_t *&#160;</td>
          <td class="paramname"><em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint16_t&#160;</td>
          <td class="paramname"><em>size_u8</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint16_t&#160;</td>
          <td class="paramname"><em>page_size_u8</em> = <code><a class="el" href="mega_2flash_8h.htm#a1317f7d8624774499e4fa8a8b079454a">AVR_FLASH_PAGE_SIZE</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Write buffer in 16bit words to flash. </p>
<p><a class="el" href="classavr8mega_1_1_flash.htm" title="A driver class offering flash access via API for AVR (MEGA) to allow for persistent data.">Flash</a> location prior must be in erase state and flash unlocked</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">buffer</td><td>Pointer to destination flash address </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">data</td><td>Pointer to source data </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">size_u8</td><td>Data size of program / sizeof(uint8_t) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">page_size_u8</td><td>Device page size, multiples of sizeof(uint8_t). Default <a class="el" href="mega_2flash_8h.htm#a1317f7d8624774499e4fa8a8b079454a">AVR_FLASH_PAGE_SIZE</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">true</td><td>write success </td></tr>
    <tr><td class="paramname">false</td><td>write failure </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><b>avr8mega</b></li><li class="navelem"><a class="el" href="classavr8mega_1_1_flash.htm">Flash</a></li>
    <li class="footer">Generated on Mon Jan 1 2024 12:52:09 for ArduinoPStruct by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
