<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArduinoPStruct: explain.ino</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(function() { init_search(); });
/* @license-end */
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="doxygenstyle.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ArduinoPStruct
   &#160;<span id="projectnumber">release_100-a9087b5 (git)</span>
   </div>
   <div id="projectbrief">Library for accessing flash with ware levelling, supporting Arduino and OpenSTM32 (GPL).</div>
  </td>
   <td>        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
</td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('explain_8ino-example.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">explain.ino</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><span class="comment">/**</span></div>
<div class="line"><span class="comment"> * Example use of PStruct (persistent storage structure classes).</span></div>
<div class="line"><span class="comment"> * In this example we attempt to load a user defined ADT but if that fails we use default values.  The ADT is printed </span></div>
<div class="line"><span class="comment"> * to serial and a counter field is then incremented with save attempted.  Next time the program boots the process </span></div>
<div class="line"><span class="comment"> * repeats, each time persistent storage content should change.</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * Architecture support:</span></div>
<div class="line"><span class="comment"> *  AVR8 (Uno/Nano)</span></div>
<div class="line"><span class="comment"> *  STM32 (F103.  Blue pill/Maple mini)</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * Dave.C, 2019</span></div>
<div class="line"><span class="comment"> */</span></div>
<div class="line"> </div>
<div class="line"><span class="comment">// include media storage access base class and user api</span></div>
<div class="line"><span class="preprocessor">#include &quot;<a class="code" href="media_8h.htm">media.h</a>&quot;</span></div>
<div class="line"><span class="preprocessor">#include &quot;<a class="code" href="struct_8h.htm">struct.h</a>&quot;</span></div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#if defined(ARDUINO_ARCH_STM32)</span></div>
<div class="line"> </div>
<div class="line"><span class="comment">// Include chip specific media wrapper for flash.  this wrapper could for be an off chip flash device</span></div>
<div class="line"><span class="preprocessor">#include &quot;<a class="code" href="stm32_2f103_2wrap_8h.htm">stm32/f103/wrap.h</a>&quot;</span></div>
<div class="line"> </div>
<div class="line"><span class="comment">// maple mini default board led</span></div>
<div class="line"><span class="preprocessor">#define BOARD_LED_PIN 33</span></div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#elif defined(ARDUINO_ARCH_AVR)</span></div>
<div class="line"> </div>
<div class="line"><span class="comment">// Include chip specific media wrapper for flash.  this wrapper could for be an off chip flash device</span></div>
<div class="line"><span class="preprocessor">#include &quot;<a class="code" href="mega_2flash_8h.htm">mega/flash.h</a>&quot;</span></div>
<div class="line"><span class="preprocessor">#include &quot;<a class="code" href="mega_2wrap_8h.htm">mega/wrap.h</a>&quot;</span></div>
<div class="line"> </div>
<div class="line"><span class="comment">// UNO default board led</span></div>
<div class="line"><span class="preprocessor">#define BOARD_LED_PIN 13</span></div>
<div class="line"> </div>
<div class="line"><span class="preprocessor">#else</span></div>
<div class="line"><span class="preprocessor">#error Unsupported core</span></div>
<div class="line"><span class="preprocessor">#endif</span></div>
<div class="line"> </div>
<div class="line"><span class="comment"></span> </div>
<div class="line"><span class="comment">/**</span></div>
<div class="line"><span class="comment"> * Application specific macro stating how many storage copies are to be used.  this essential controls wear levelling as a </span></div>
<div class="line"><span class="comment"> * higher value will use more storage over time but increases endurance and therefore your applications useful life.  If </span></div>
<div class="line"><span class="comment"> * you know you are likely to perform a lot of writes, increase the value to suit.  You may need to consult at your devices</span></div>
<div class="line"><span class="comment"> * flash module manufacturer datasheet/reference manual in order to correctly size.</span></div>
<div class="line"><span class="comment"> */</span></div>
<div class="line"><span class="preprocessor">#define PSTRUCT_USE_N_WARELEVELS  5</span></div>
<div class="line"> </div>
<div class="line"><span class="comment"></span> </div>
<div class="line"><span class="comment">/**</span></div>
<div class="line"><span class="comment"> * Application specific ADT, you define this to suit your data requirements.  it is written to and read from persistent storage</span></div>
<div class="line"><span class="comment"> * and you will access your data via this type.  Most likely this will be a configuration structure of some form.</span></div>
<div class="line"><span class="comment"> *</span></div>
<div class="line"><span class="comment"> * @note packing not important whatever gives best optimisation either for access by cpu (typically padded) or storage (not padded)</span></div>
<div class="line"><span class="comment"> */</span></div>
<div class="line"><span class="preprocessor">#pragma pack(push,1)</span></div>
<div class="line"><span class="keyword">typedef</span> <span class="keyword">struct </span>{</div>
<div class="line">  uint32_t value1;</div>
<div class="line">  uint16_t value2;</div>
<div class="line">  <span class="keywordtype">char</span>  str[7];  <span class="comment">// C array size ensures structure not a division of sizeof(uint32_t) or sizeof(uint16_t)</span></div>
<div class="line">}<a name="_a0"></a><a class="code" href="structconfig__t.htm">config_t</a>;</div>
<div class="line"><span class="preprocessor">#pragma pack(pop)</span></div>
<div class="line"> </div>
<div class="line"><span class="comment"></span> </div>
<div class="line"><span class="comment">/**</span></div>
<div class="line"><span class="comment"> * Create your media access instance.  This wrapper class allows you to customise where your persistent storage resides.  It is</span></div>
<div class="line"><span class="comment"> * normally via on-chip flash but could be some place else should you decide to write your own.</span></div>
<div class="line"><span class="comment"> */</span></div>
<div class="line"><a name="_a1"></a><a class="code" href="classwrap_1_1_flash.htm">wrap::Flash</a> <a name="a2"></a><a class="code" href="explain_8ino.htm#a9f9ccb7742ef3ef7b424b4a93ba4fbb4">g_media</a>;</div>
<div class="line"> </div>
<div class="line"><span class="comment"></span> </div>
<div class="line"><span class="comment">/**</span></div>
<div class="line"><span class="comment"> * Flash allocation by compiler rather than specifying an address that may or may not be used.  This declaration will allocate</span></div>
<div class="line"><span class="comment"> * enough space, aligned by page so it can be safely erased and programmed without affecting the rest of program code.  Doesn&#39;t </span></div>
<div class="line"><span class="comment"> * matter what you fill with as it won&#39;t get loaded correctly and defaults will be written first time executing</span></div>
<div class="line"><span class="comment"> */</span></div>
<div class="line"><span class="preprocessor">#if defined(ARDUINO_ARCH_AVR)</span></div>
<div class="line"><span class="keyword">const</span> uint8_t data[<a name="a3"></a><a class="code" href="struct_8h.htm#aaeac7b7b16deaf1e5b406dc283698328">PERSISTSTRUCT_SIZE</a>(<a class="code" href="structconfig__t.htm">config_t</a>,<a name="a4"></a><a class="code" href="mega_2flash_8h.htm#a1317f7d8624774499e4fa8a8b079454a">AVR_FLASH_PAGE_SIZE</a>,<a name="a5"></a><a class="code" href="explain_8ino.htm#ab8f6ed36199ef165993f009f946eb0b3">PSTRUCT_USE_N_WARELEVELS</a>)] PROGMEM <a name="a6"></a><a class="code" href="explain_8ino.htm#a46c1880136135e630c5211a1210a5c86">__attribute__</a> ((aligned (<a class="code" href="mega_2flash_8h.htm#a1317f7d8624774499e4fa8a8b079454a">AVR_FLASH_PAGE_SIZE</a>))) = { 0xff };</div>
<div class="line"><span class="preprocessor">#elif defined(ARDUINO_ARCH_STM32)</span></div>
<div class="line"><span class="keyword">const</span> uint8_t data[<a class="code" href="struct_8h.htm#aaeac7b7b16deaf1e5b406dc283698328">PERSISTSTRUCT_SIZE</a>(<a class="code" href="structconfig__t.htm">config_t</a>,STM32F103X_FLASH_PAGE_SIZE,<a class="code" href="explain_8ino.htm#ab8f6ed36199ef165993f009f946eb0b3">PSTRUCT_USE_N_WARELEVELS</a>)] <a class="code" href="explain_8ino.htm#a46c1880136135e630c5211a1210a5c86">__attribute__</a> ((aligned (STM32F103X_FLASH_PAGE_SIZE))) = { 0xff };</div>
<div class="line"><span class="preprocessor">#endif</span></div>
<div class="line"><span class="comment"></span> </div>
<div class="line"><span class="comment">/**</span></div>
<div class="line"><span class="comment"> * Use config_t and g_media for persistent storage, n pages worth.  use this instance to update media with your structure changes</span></div>
<div class="line"><span class="comment"> * or to simple load your structure.  Here we just stick the data manually at the end of storage</span></div>
<div class="line"><span class="comment"> */</span></div>
<div class="line"><a name="_a7"></a><a class="code" href="classpersist_1_1_struct.htm">persist::Struct&lt;config_t&gt;</a> <a name="a8"></a><a class="code" href="explain_8ino.htm#a694e0b7ab821efbfd482317689b28a00">g_cfg_ps</a>(<a class="code" href="explain_8ino.htm#a9f9ccb7742ef3ef7b424b4a93ba4fbb4">g_media</a>, <span class="keyword">reinterpret_cast&lt;</span>uint32_t*<span class="keyword">&gt;</span>(<span class="keyword">const_cast&lt;</span>uint8_t*<span class="keyword">&gt;</span>(&amp;data[0])), <a class="code" href="explain_8ino.htm#ab8f6ed36199ef165993f009f946eb0b3">PSTRUCT_USE_N_WARELEVELS</a>);</div>
<div class="line"><span class="comment"></span> </div>
<div class="line"><span class="comment">/**</span></div>
<div class="line"><span class="comment"> * Your application ADT.  Use this to access your data, defaults optional and depends upon what you do with save(...).  if using PERSISTSTRUCT_POINTERS </span></div>
<div class="line"><span class="comment"> * then you&#39;ll have to write these before invoking save(...) because failed load would be using the same memory</span></div>
<div class="line"><span class="comment"> */</span></div>
<div class="line"><a class="code" href="structconfig__t.htm">config_t</a> <a name="a9"></a><a class="code" href="explain_8ino.htm#abe4e7e77b0d1202d865b0ba308a5d01e">g_cfg</a> = {</div>
<div class="line">    .<a name="a10"></a>value1 = 0x0c0ffee0,</div>
<div class="line">    .value2 = 0x1234,</div>
<div class="line">    <span class="stringliteral">&quot;Heidi\0&quot;</span></div>
<div class="line">};</div>
<div class="line"> </div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">void</span> setup() {</div>
<div class="line">  Serial.begin(9600);</div>
<div class="line">  <span class="keywordflow">while</span>(!Serial) { }</div>
<div class="line"> </div>
<div class="line">  Serial.print(<span class="stringliteral">&quot;Loading config from &quot;</span>);</div>
<div class="line">  Serial.println(<span class="stringliteral">&quot;flash&quot;</span>);</div>
<div class="line">  Serial.print(<span class="stringliteral">&quot;Raw storage start 0x&quot;</span>);</div>
<div class="line">  Serial.print(<span class="keyword">reinterpret_cast&lt;</span>uint32_t<span class="keyword">&gt;</span>(&amp;data[0]), HEX);</div>
<div class="line">  Serial.print(<span class="stringliteral">&quot;, size &quot;</span>);</div>
<div class="line">  Serial.println(<span class="keyword">static_cast&lt;</span>uint32_t<span class="keyword">&gt;</span>(<span class="keyword">sizeof</span>(data)), DEC);</div>
<div class="line">  Serial.println(<span class="stringliteral">&quot;Bytes&quot;</span>);</div>
<div class="line">  Serial.print(<a class="code" href="explain_8ino.htm#a694e0b7ab821efbfd482317689b28a00">g_cfg_ps</a>.GetWareLevels(), DEC);</div>
<div class="line">  Serial.println(<span class="stringliteral">&quot; Ware levels\n&quot;</span>);</div>
<div class="line"> </div>
<div class="line">  <span class="comment">// attempt to load user ADT from media</span></div>
<div class="line">  <span class="keywordflow">if</span> (<a class="code" href="explain_8ino.htm#a694e0b7ab821efbfd482317689b28a00">g_cfg_ps</a>.Load(<a class="code" href="explain_8ino.htm#abe4e7e77b0d1202d865b0ba308a5d01e">g_cfg</a>)) {</div>
<div class="line">    <span class="comment">// ADT loaded.  now you can access your data</span></div>
<div class="line">    Serial.println(<span class="stringliteral">&quot;Loaded&quot;</span>);</div>
<div class="line">  }<span class="keywordflow">else</span> {</div>
<div class="line">    <span class="comment">// ADT load fail.  assume we have never written it and setup default here.  we should really only run this code once on a new device</span></div>
<div class="line">    <span class="comment">// NOTE: the way PStruct has been written even a worn out device should get here so long as one valid structure exists</span></div>
<div class="line">    Serial.println(<span class="stringliteral">&quot;New or worn out device.  Using default settings&quot;</span>);</div>
<div class="line">    </div>
<div class="line">    <span class="comment">// save defaults in ADT to media with attempt to find next position just use start of media for next write</span></div>
<div class="line">    <span class="keywordflow">if</span> (<a class="code" href="explain_8ino.htm#a694e0b7ab821efbfd482317689b28a00">g_cfg_ps</a>.Save(<a class="code" href="explain_8ino.htm#abe4e7e77b0d1202d865b0ba308a5d01e">g_cfg</a>,<span class="keyword">true</span>)) {</div>
<div class="line">      Serial.println(<span class="stringliteral">&quot;Write success&quot;</span>);</div>
<div class="line">    }<span class="keywordflow">else</span> {</div>
<div class="line">      Serial.println(<span class="stringliteral">&quot;Write failed.  assume device worn out!&quot;</span>);</div>
<div class="line">    }</div>
<div class="line">  }</div>
<div class="line"> </div>
<div class="line">  <span class="comment">// print out ADT</span></div>
<div class="line">  Serial.print(<span class="stringliteral">&quot;ADT dump @ 0x&quot;</span>);</div>
<div class="line"><span class="preprocessor">#if defined(ARDUINO_ARCH_STM32)</span></div>
<div class="line">  Serial.println(<span class="keyword">reinterpret_cast&lt;</span>uint32_t<span class="keyword">&gt;</span>(<a class="code" href="explain_8ino.htm#a694e0b7ab821efbfd482317689b28a00">g_cfg_ps</a>.GetLocation()), HEX);</div>
<div class="line"><span class="preprocessor">#elif defined(ARDUINO_ARCH_AVR)</span></div>
<div class="line">  Serial.println(<span class="keyword">reinterpret_cast&lt;</span>uint16_t<span class="keyword">&gt;</span>(<a class="code" href="explain_8ino.htm#a694e0b7ab821efbfd482317689b28a00">g_cfg_ps</a>.GetLocation()), HEX);</div>
<div class="line"><span class="preprocessor">#endif</span></div>
<div class="line">  Serial.println(<span class="stringliteral">&quot;---------------&quot;</span>);</div>
<div class="line">  Serial.print(<span class="stringliteral">&quot;g_cfg.value1 = 0x&quot;</span>);</div>
<div class="line">  Serial.println(<a class="code" href="explain_8ino.htm#abe4e7e77b0d1202d865b0ba308a5d01e">g_cfg</a>.value1, HEX);</div>
<div class="line">  Serial.print(<span class="stringliteral">&quot;g_cfg.value2 = 0x&quot;</span>);</div>
<div class="line">  Serial.println(<a class="code" href="explain_8ino.htm#abe4e7e77b0d1202d865b0ba308a5d01e">g_cfg</a>.<a name="a11"></a>value2, HEX);</div>
<div class="line">  Serial.print(<span class="stringliteral">&quot;g_cfg.str = &quot;</span>);</div>
<div class="line">  Serial.println(<a class="code" href="explain_8ino.htm#abe4e7e77b0d1202d865b0ba308a5d01e">g_cfg</a>.<a name="a12"></a>str);</div>
<div class="line"> </div>
<div class="line">  <a class="code" href="explain_8ino.htm#abe4e7e77b0d1202d865b0ba308a5d01e">g_cfg</a>.value2++;</div>
<div class="line">  </div>
<div class="line">  <span class="keywordflow">if</span> (<a class="code" href="explain_8ino.htm#a694e0b7ab821efbfd482317689b28a00">g_cfg_ps</a>.Save(<a class="code" href="explain_8ino.htm#abe4e7e77b0d1202d865b0ba308a5d01e">g_cfg</a>)) {</div>
<div class="line">    Serial.println(<span class="stringliteral">&quot;Update ok&quot;</span>);</div>
<div class="line">  }<span class="keywordflow">else</span> {</div>
<div class="line">    Serial.println(<span class="stringliteral">&quot;Update failed&quot;</span>);</div>
<div class="line">  }</div>
<div class="line">  Serial.println(<span class="stringliteral">&quot;Done&quot;</span>);</div>
<div class="line"> </div>
<div class="line">  pinMode(<a name="a13"></a><a class="code" href="explain_8ino.htm#a2cc600954192f9508dccfa4ff5d76b05">BOARD_LED_PIN</a>, OUTPUT);</div>
<div class="line">  <span class="keywordflow">for</span>(;;) {</div>
<div class="line"><span class="preprocessor">#ifdef GIGGLERS_SERIAL</span></div>
<div class="line"><span class="comment">    /**</span></div>
<div class="line"><span class="comment">     * https://github.com/gigglerg/Arduino_Core_STM32_Maple_Support</span></div>
<div class="line"><span class="comment">     * known issues</span></div>
<div class="line"><span class="comment">     */</span></div>
<div class="line">    Serial.flush();</div>
<div class="line"><span class="preprocessor">#endif</span></div>
<div class="line">    digitalWrite(<a class="code" href="explain_8ino.htm#a2cc600954192f9508dccfa4ff5d76b05">BOARD_LED_PIN</a>, 0);</div>
<div class="line">    delay(100);</div>
<div class="line">    digitalWrite(<a class="code" href="explain_8ino.htm#a2cc600954192f9508dccfa4ff5d76b05">BOARD_LED_PIN</a>, 1);</div>
<div class="line">    delay(200);</div>
<div class="line">  }</div>
<div class="line">}</div>
<div class="line"> </div>
<div class="line"><span class="keywordtype">void</span> loop() {</div>
<div class="line">}</div>
</div><!-- fragment --> </div><!-- contents -->
</div><!-- doc-content -->
<div class="ttc" id="aexplain_8ino_htm_a9f9ccb7742ef3ef7b424b4a93ba4fbb4"><div class="ttname"><a href="explain_8ino.htm#a9f9ccb7742ef3ef7b424b4a93ba4fbb4">g_media</a></div><div class="ttdeci">wrap::Flash g_media</div><div class="ttdoc">Create your media access instance.</div><div class="ttdef"><b>Definition:</b> explain.ino:68</div></div>
<div class="ttc" id="aexplain_8ino_htm_a694e0b7ab821efbfd482317689b28a00"><div class="ttname"><a href="explain_8ino.htm#a694e0b7ab821efbfd482317689b28a00">g_cfg_ps</a></div><div class="ttdeci">persist::Struct&lt; config_t &gt; g_cfg_ps(g_media, reinterpret_cast&lt; uint32_t * &gt;(const_cast&lt; uint8_t * &gt;(&amp;data[0])), PSTRUCT_USE_N_WARELEVELS)</div><div class="ttdoc">Use config_t and g_media for persistent storage, n pages worth.</div></div>
<div class="ttc" id="amega_2flash_8h_htm_a1317f7d8624774499e4fa8a8b079454a"><div class="ttname"><a href="mega_2flash_8h.htm#a1317f7d8624774499e4fa8a8b079454a">AVR_FLASH_PAGE_SIZE</a></div><div class="ttdeci">#define AVR_FLASH_PAGE_SIZE</div><div class="ttdoc">Device page size in Bytes.</div><div class="ttdef"><b>Definition:</b> flash.h:56</div></div>
<div class="ttc" id="astm32_2f103_2wrap_8h_htm"><div class="ttname"><a href="stm32_2f103_2wrap_8h.htm">wrap.h</a></div></div>
<div class="ttc" id="aexplain_8ino_htm_a46c1880136135e630c5211a1210a5c86"><div class="ttname"><a href="explain_8ino.htm#a46c1880136135e630c5211a1210a5c86">__attribute__</a></div><div class="ttdeci">const uint8_t data[PERSISTSTRUCT_SIZE(config_t, AVR_FLASH_PAGE_SIZE, PSTRUCT_USE_N_WARELEVELS)] PROGMEM __attribute__((aligned(AVR_FLASH_PAGE_SIZE)))</div><div class="ttdoc">Flash allocation by compiler rather than specifying an address that may or may not be used.</div></div>
<div class="ttc" id="amega_2wrap_8h_htm"><div class="ttname"><a href="mega_2wrap_8h.htm">wrap.h</a></div></div>
<div class="ttc" id="amega_2flash_8h_htm"><div class="ttname"><a href="mega_2flash_8h.htm">flash.h</a></div></div>
<div class="ttc" id="aexplain_8ino_htm_abe4e7e77b0d1202d865b0ba308a5d01e"><div class="ttname"><a href="explain_8ino.htm#abe4e7e77b0d1202d865b0ba308a5d01e">g_cfg</a></div><div class="ttdeci">config_t g_cfg</div><div class="ttdoc">Your application ADT.</div><div class="ttdef"><b>Definition:</b> explain.ino:92</div></div>
<div class="ttc" id="aclasspersist_1_1_struct_htm"><div class="ttname"><a href="classpersist_1_1_struct.htm">persist::Struct</a></div><div class="ttdoc">A class offering persistent storage access to a user supplied structure with ware levelling.</div><div class="ttdef"><b>Definition:</b> struct.h:51</div></div>
<div class="ttc" id="astructconfig__t_htm"><div class="ttname"><a href="structconfig__t.htm">config_t</a></div><div class="ttdoc">Application specific ADT, you define this to suit your data requirements.</div><div class="ttdef"><b>Definition:</b> explain.ino:56</div></div>
<div class="ttc" id="aclasswrap_1_1_flash_htm"><div class="ttname"><a href="classwrap_1_1_flash.htm">wrap::Flash</a></div><div class="ttdoc">Wrapper for MCU specialised API to flash module and CRC.</div><div class="ttdef"><b>Definition:</b> wrap.h:86</div></div>
<div class="ttc" id="amedia_8h_htm"><div class="ttname"><a href="media_8h.htm">media.h</a></div></div>
<div class="ttc" id="aexplain_8ino_htm_a2cc600954192f9508dccfa4ff5d76b05"><div class="ttname"><a href="explain_8ino.htm#a2cc600954192f9508dccfa4ff5d76b05">BOARD_LED_PIN</a></div><div class="ttdeci">#define BOARD_LED_PIN</div><div class="ttdoc">Example use of PStruct (persistent storage structure classes).</div><div class="ttdef"><b>Definition:</b> explain.ino:33</div></div>
<div class="ttc" id="aexplain_8ino_htm_ab8f6ed36199ef165993f009f946eb0b3"><div class="ttname"><a href="explain_8ino.htm#ab8f6ed36199ef165993f009f946eb0b3">PSTRUCT_USE_N_WARELEVELS</a></div><div class="ttdeci">#define PSTRUCT_USE_N_WARELEVELS</div><div class="ttdoc">Application specific macro stating how many storage copies are to be used.</div><div class="ttdef"><b>Definition:</b> explain.ino:46</div></div>
<div class="ttc" id="astruct_8h_htm_aaeac7b7b16deaf1e5b406dc283698328"><div class="ttname"><a href="struct_8h.htm#aaeac7b7b16deaf1e5b406dc283698328">PERSISTSTRUCT_SIZE</a></div><div class="ttdeci">#define PERSISTSTRUCT_SIZE(s, ps, l)</div><div class="ttdoc">Macro should be defined in limited memory environments, giving access to private instance of custom d...</div><div class="ttdef"><b>Definition:</b> struct.h:36</div></div>
<div class="ttc" id="astruct_8h_htm"><div class="ttname"><a href="struct_8h.htm">struct.h</a></div></div>
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="footer">Generated on Mon Jan 1 2024 12:52:09 for ArduinoPStruct by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
