<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArduinoPStruct: persist::Struct&lt; T &gt; Class Template Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(function() { init_search(); });
/* @license-end */
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="doxygenstyle.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ArduinoPStruct
   &#160;<span id="projectnumber">release_100-a9087b5 (git)</span>
   </div>
   <div id="projectbrief">Library for accessing flash with ware levelling, supporting Arduino and OpenSTM32 (GPL).</div>
  </td>
   <td>        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
</td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classpersist_1_1_struct.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="classpersist_1_1_struct-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">persist::Struct&lt; T &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>A class offering persistent storage access to a user supplied structure with ware levelling.  
 <a href="classpersist_1_1_struct.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="struct_8h_source.htm">struct.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a4ba81974ee9a705cd53e7bea687f6e4f"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpersist_1_1_struct.htm#a4ba81974ee9a705cd53e7bea687f6e4f">Struct</a> (<a class="el" href="classpersist_1_1_media.htm">Media</a> &amp;m, uint32_t *start, uint8_t ware_level)</td></tr>
<tr class="memdesc:a4ba81974ee9a705cd53e7bea687f6e4f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor based upon required ware level.  <a href="classpersist_1_1_struct.htm#a4ba81974ee9a705cd53e7bea687f6e4f">More...</a><br /></td></tr>
<tr class="separator:a4ba81974ee9a705cd53e7bea687f6e4f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1a1822995abf90d86345a96165d5776c"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpersist_1_1_struct.htm#a1a1822995abf90d86345a96165d5776c">Struct</a> (<a class="el" href="classpersist_1_1_media.htm">Media</a> &amp;m, uint32_t *start, uint32_t *end)</td></tr>
<tr class="memdesc:a1a1822995abf90d86345a96165d5776c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor based upon start and end pointers covering range for storage.  <a href="classpersist_1_1_struct.htm#a1a1822995abf90d86345a96165d5776c">More...</a><br /></td></tr>
<tr class="separator:a1a1822995abf90d86345a96165d5776c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab06614400ec8f5312e3b91a5664d96d7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpersist_1_1_struct.htm#ab06614400ec8f5312e3b91a5664d96d7">Unload</a> ()</td></tr>
<tr class="memdesc:ab06614400ec8f5312e3b91a5664d96d7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Unload internal data block ADT.  <a href="classpersist_1_1_struct.htm#ab06614400ec8f5312e3b91a5664d96d7">More...</a><br /></td></tr>
<tr class="separator:ab06614400ec8f5312e3b91a5664d96d7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abbfac71808f664db58fd4b59e6fa009d"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpersist_1_1_struct.htm#abbfac71808f664db58fd4b59e6fa009d">Load</a> (T &amp;data)</td></tr>
<tr class="memdesc:abbfac71808f664db58fd4b59e6fa009d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Load data block ADT from media.  <a href="classpersist_1_1_struct.htm#abbfac71808f664db58fd4b59e6fa009d">More...</a><br /></td></tr>
<tr class="separator:abbfac71808f664db58fd4b59e6fa009d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a548c255148f5590ccf7e9ea7f2a59ac3"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpersist_1_1_struct.htm#a548c255148f5590ccf7e9ea7f2a59ac3">Save</a> (T &amp;data, bool not_loaded_force=false)</td></tr>
<tr class="memdesc:a548c255148f5590ccf7e9ea7f2a59ac3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Save data block ADT to media.  <a href="classpersist_1_1_struct.htm#a548c255148f5590ccf7e9ea7f2a59ac3">More...</a><br /></td></tr>
<tr class="separator:a548c255148f5590ccf7e9ea7f2a59ac3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac092fe3aeaae3b46e559a02d7cf210dd"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpersist_1_1_struct.htm#ac092fe3aeaae3b46e559a02d7cf210dd">IsLoaded</a> () const</td></tr>
<tr class="memdesc:ac092fe3aeaae3b46e559a02d7cf210dd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Query internal data block ADT been loaded from media.  <a href="classpersist_1_1_struct.htm#ac092fe3aeaae3b46e559a02d7cf210dd">More...</a><br /></td></tr>
<tr class="separator:ac092fe3aeaae3b46e559a02d7cf210dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a34d429f433b4e52e616e9eb638ee5ee7"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpersist_1_1_struct.htm#a34d429f433b4e52e616e9eb638ee5ee7">GetWareLevels</a> () const</td></tr>
<tr class="memdesc:a34d429f433b4e52e616e9eb638ee5ee7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get wave levels.  <a href="classpersist_1_1_struct.htm#a34d429f433b4e52e616e9eb638ee5ee7">More...</a><br /></td></tr>
<tr class="separator:a34d429f433b4e52e616e9eb638ee5ee7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acea1082fdd076b85faa68ffaca954ff7"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpersist_1_1_struct.htm#acea1082fdd076b85faa68ffaca954ff7">GetPages</a> () const</td></tr>
<tr class="memdesc:acea1082fdd076b85faa68ffaca954ff7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get raw storage media page count allocated for read/write operations.  <a href="classpersist_1_1_struct.htm#acea1082fdd076b85faa68ffaca954ff7">More...</a><br /></td></tr>
<tr class="separator:acea1082fdd076b85faa68ffaca954ff7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6b4d2373c900c53416e22d8425a551aa"><td class="memItemLeft" align="right" valign="top">uint32_t *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpersist_1_1_struct.htm#a6b4d2373c900c53416e22d8425a551aa">GetLocation</a> () const</td></tr>
<tr class="memdesc:a6b4d2373c900c53416e22d8425a551aa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get location on media of currently loaded or last written internal data block ADT.  <a href="classpersist_1_1_struct.htm#a6b4d2373c900c53416e22d8425a551aa">More...</a><br /></td></tr>
<tr class="separator:a6b4d2373c900c53416e22d8425a551aa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4a94d8af95ce635c69f9a09e90aae95c"><td class="memItemLeft" align="right" valign="top">uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpersist_1_1_struct.htm#a4a94d8af95ce635c69f9a09e90aae95c">GetCounter</a> () const</td></tr>
<tr class="memdesc:a4a94d8af95ce635c69f9a09e90aae95c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get ware levelling counter of currently loaded internal data block ADT.  <a href="classpersist_1_1_struct.htm#a4a94d8af95ce635c69f9a09e90aae95c">More...</a><br /></td></tr>
<tr class="separator:a4a94d8af95ce635c69f9a09e90aae95c"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a87cfdf25d7ef793fa128f240977647ea"><td class="memItemLeft" align="right" valign="top">static constexpr uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpersist_1_1_struct.htm#a87cfdf25d7ef793fa128f240977647ea">GetStorageUnitSize</a> ()</td></tr>
<tr class="memdesc:a87cfdf25d7ef793fa128f240977647ea"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get internal data block ADT storage size.  <a href="classpersist_1_1_struct.htm#a87cfdf25d7ef793fa128f240977647ea">More...</a><br /></td></tr>
<tr class="separator:a87cfdf25d7ef793fa128f240977647ea"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aba05a41c1ccad66c1eefed72271cd700"><td class="memItemLeft" align="right" valign="top">static constexpr uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpersist_1_1_struct.htm#aba05a41c1ccad66c1eefed72271cd700">GetStorageUnitPages</a> (const uint32_t page_size)</td></tr>
<tr class="memdesc:aba05a41c1ccad66c1eefed72271cd700"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get number of raw storage media pages required to write internal data block.  <a href="classpersist_1_1_struct.htm#aba05a41c1ccad66c1eefed72271cd700">More...</a><br /></td></tr>
<tr class="separator:aba05a41c1ccad66c1eefed72271cd700"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><h3>template&lt;typename T&gt;<br />
class persist::Struct&lt; T &gt;</h3>

<p>A class offering persistent storage access to a user supplied structure with ware levelling. </p>
<p>Internally the supplied user ADT &lt;T&gt; is wrapped with a header that includes retrieval meta data allowing multiple copies to be stored on media. The latest is loaded or in case of corruption progressively older copies of ADT depending upon what was stored over time.</p>
<dl class="section attention"><dt>Attention</dt><dd>If your ADT fields are changed it is good practice to save it more than once so a load failure at least has a chance at returning a usable (new format) structure</dd></dl>
<dl class="tparams"><dt>Template Parameters</dt><dd>
  <table class="tparams">
    <tr><td class="paramname">T</td><td>ADT type name managed and storaged by PStruct instance </td></tr>
  </table>
  </dd>
</dl>
<dl class="section examples"><dt>Examples</dt><dd><a class="el" href="avr_eprom_8ino-example.htm#_a3">avr_eprom.ino</a>, <a class="el" href="explain_8ino-example.htm#_a7">explain.ino</a>, and <a class="el" href="pointers_8ino-example.htm#_a3">pointers.ino</a>.</dd>
</dl>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a id="a4ba81974ee9a705cd53e7bea687f6e4f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4ba81974ee9a705cd53e7bea687f6e4f">&#9670;&nbsp;</a></span>Struct() <span class="overload">[1/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classpersist_1_1_struct.htm">persist::Struct</a>&lt; T &gt;::<a class="el" href="classpersist_1_1_struct.htm">Struct</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classpersist_1_1_media.htm">Media</a> &amp;&#160;</td>
          <td class="paramname"><em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t *&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t&#160;</td>
          <td class="paramname"><em>ware_level</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Constructor based upon required ware level. </p>
<p>You will have to load your ADT via <a class="el" href="classpersist_1_1_struct.htm#abbfac71808f664db58fd4b59e6fa009d">Load</a></p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">m</td><td>media instance reference </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">start</td><td>location or offset into media for first write. Numeric may not represent a valid CPU address. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">ware_level</td><td>ware levels N (maximum) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a1a1822995abf90d86345a96165d5776c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1a1822995abf90d86345a96165d5776c">&#9670;&nbsp;</a></span>Struct() <span class="overload">[2/2]</span></h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classpersist_1_1_struct.htm">persist::Struct</a>&lt; T &gt;::<a class="el" href="classpersist_1_1_struct.htm">Struct</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classpersist_1_1_media.htm">Media</a> &amp;&#160;</td>
          <td class="paramname"><em>m</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t *&#160;</td>
          <td class="paramname"><em>start</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint32_t *&#160;</td>
          <td class="paramname"><em>end</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Constructor based upon start and end pointers covering range for storage. </p>
<p>You will have to load your ADT via <a class="el" href="classpersist_1_1_struct.htm#abbfac71808f664db58fd4b59e6fa009d">Load</a></p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in,out]</td><td class="paramname">m</td><td>media instance reference </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">start</td><td>location or offset into media for first write. Numeric may not represent a valid CPU address. </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">end</td><td>location or offset into media for first write. Numeric may not represent a valid CPU address. Should be &gt; start. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a id="a4a94d8af95ce635c69f9a09e90aae95c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a4a94d8af95ce635c69f9a09e90aae95c">&#9670;&nbsp;</a></span>GetCounter()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">uint32_t <a class="el" href="classpersist_1_1_struct.htm">persist::Struct</a>&lt; T &gt;::GetCounter </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get ware levelling counter of currently loaded internal data block ADT. </p>
<dl class="section return"><dt>Returns</dt><dd>N </dd></dl>

</div>
</div>
<a id="a6b4d2373c900c53416e22d8425a551aa"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a6b4d2373c900c53416e22d8425a551aa">&#9670;&nbsp;</a></span>GetLocation()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">uint32_t* <a class="el" href="classpersist_1_1_struct.htm">persist::Struct</a>&lt; T &gt;::GetLocation </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get location on media of currently loaded or last written internal data block ADT. </p>
<dl class="section note"><dt>Note</dt><dd>Use as debugging aid</dd></dl>
<dl class="section return"><dt>Returns</dt><dd>Pointer. Numeric may not represent a valid CPU address. </dd></dl>

</div>
</div>
<a id="acea1082fdd076b85faa68ffaca954ff7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#acea1082fdd076b85faa68ffaca954ff7">&#9670;&nbsp;</a></span>GetPages()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">uint32_t <a class="el" href="classpersist_1_1_struct.htm">persist::Struct</a>&lt; T &gt;::GetPages </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get raw storage media page count allocated for read/write operations. </p>
<dl class="section note"><dt>Note</dt><dd>Use as debugging aid</dd></dl>
<dl class="section return"><dt>Returns</dt><dd>N pages </dd></dl>

</div>
</div>
<a id="aba05a41c1ccad66c1eefed72271cd700"></a>
<h2 class="memtitle"><span class="permalink"><a href="#aba05a41c1ccad66c1eefed72271cd700">&#9670;&nbsp;</a></span>GetStorageUnitPages()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static constexpr uint32_t <a class="el" href="classpersist_1_1_struct.htm">persist::Struct</a>&lt; T &gt;::GetStorageUnitPages </td>
          <td>(</td>
          <td class="paramtype">const uint32_t&#160;</td>
          <td class="paramname"><em>page_size</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get number of raw storage media pages required to write internal data block. </p>
<dl class="section return"><dt>Returns</dt><dd>N pages </dd></dl>

</div>
</div>
<a id="a87cfdf25d7ef793fa128f240977647ea"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a87cfdf25d7ef793fa128f240977647ea">&#9670;&nbsp;</a></span>GetStorageUnitSize()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static constexpr uint32_t <a class="el" href="classpersist_1_1_struct.htm">persist::Struct</a>&lt; T &gt;::GetStorageUnitSize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span><span class="mlabel">constexpr</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get internal data block ADT storage size. </p>
<dl class="section return"><dt>Returns</dt><dd>Size, Bytes </dd></dl>

</div>
</div>
<a id="a34d429f433b4e52e616e9eb638ee5ee7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a34d429f433b4e52e616e9eb638ee5ee7">&#9670;&nbsp;</a></span>GetWareLevels()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">uint32_t <a class="el" href="classpersist_1_1_struct.htm">persist::Struct</a>&lt; T &gt;::GetWareLevels </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get wave levels. </p>
<p>Essentially how many possible loads of previous saved ADTs are possible. As media used this figure will increase</p>
<dl class="section note"><dt>Note</dt><dd>Use as debugging aid</dd></dl>
<dl class="section return"><dt>Returns</dt><dd>N </dd></dl>

</div>
</div>
<a id="ac092fe3aeaae3b46e559a02d7cf210dd"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ac092fe3aeaae3b46e559a02d7cf210dd">&#9670;&nbsp;</a></span>IsLoaded()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classpersist_1_1_struct.htm">persist::Struct</a>&lt; T &gt;::IsLoaded </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Query internal data block ADT been loaded from media. </p>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">true</td><td>loaded </td></tr>
    <tr><td class="paramname">false</td><td>not loaded </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="abbfac71808f664db58fd4b59e6fa009d"></a>
<h2 class="memtitle"><span class="permalink"><a href="#abbfac71808f664db58fd4b59e6fa009d">&#9670;&nbsp;</a></span>Load()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classpersist_1_1_struct.htm">persist::Struct</a>&lt; T &gt;::Load </td>
          <td>(</td>
          <td class="paramtype">T &amp;&#160;</td>
          <td class="paramname"><em>data</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Load data block ADT from media. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[out]</td><td class="paramname">data</td><td>block ADT </td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">true</td><td>loaded </td></tr>
    <tr><td class="paramname">false</td><td>not loaded </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a548c255148f5590ccf7e9ea7f2a59ac3"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a548c255148f5590ccf7e9ea7f2a59ac3">&#9670;&nbsp;</a></span>Save()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classpersist_1_1_struct.htm">persist::Struct</a>&lt; T &gt;::Save </td>
          <td>(</td>
          <td class="paramtype">T &amp;&#160;</td>
          <td class="paramname"><em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>not_loaded_force</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Save data block ADT to media. </p>
<dl class="section note"><dt>Note</dt><dd>You can save an ADT more than once but remember only do so when absolutely required as each save reduces life</dd>
<dd>
If fields change in your ADT like because of a firmware update, save it more than once to ensure you have recover options for the latest structure layout. You may want to add a version field to allow firmware compatibility</dd>
<dd>
If you want more than one ADT stored, create a wrap class and new instance of this class to handle it</dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">data</td><td>block ADT. Internally this will be wrapped to include a header </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">not_loaded_force</td><td>default false. Required if not loaded to force save of given ADT to media Normally this parameter default would be used but when virgin media this flag is required for inital write. </td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">true</td><td>on success </td></tr>
    <tr><td class="paramname">false</td><td>failed </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ab06614400ec8f5312e3b91a5664d96d7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ab06614400ec8f5312e3b91a5664d96d7">&#9670;&nbsp;</a></span>Unload()</h2>

<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classpersist_1_1_struct.htm">persist::Struct</a>&lt; T &gt;::Unload </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Unload internal data block ADT. </p>
<p>Clears data and loaded state </p>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><b>persist</b></li><li class="navelem"><a class="el" href="classpersist_1_1_struct.htm">Struct</a></li>
    <li class="footer">Generated on Mon Jan 1 2024 12:52:09 for ArduinoPStruct by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
