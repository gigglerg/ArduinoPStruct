<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>ArduinoPStruct: stm32f103x::Flash Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
  $(document).ready(function() { init_search(); });
/* @license-end */
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="doxygenstyle.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">ArduinoPStruct
   &#160;<span id="projectnumber">release_100-d7d59ac (git)</span>
   </div>
   <div id="projectbrief">Library for accessing flash with ware levelling, supporting Arduino and OpenSTM32 (GPL).</div>
  </td>
   <td>        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
</td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(document).ready(function(){initNavTree('classstm32f103x_1_1_flash.htm',''); initResizable(); });
/* @license-end */
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="summary">
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pub-static-attribs">Static Public Attributes</a> &#124;
<a href="classstm32f103x_1_1_flash-members.htm">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">stm32f103x::Flash Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>A class offering internal NOR flash access via API for device STM32F103C8T6 Some of the source was referenced from Arduino Maple Mini Bootloader.  
 <a href="classstm32f103x_1_1_flash.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="stm32_2f103_2flash_8h_source.htm">stm32/f103/flash.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a9c62889652819a79b5c13ae5ba420e4c"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classstm32f103x_1_1_flash.htm#a9c62889652819a79b5c13ae5ba420e4c">Program</a> (const uint32_t *buffer, const uint32_t *data, const int16_t size_u32, const uint32_t page_size_u32=<a class="el" href="stm32_2f103_2flash_8h.htm#a0a97cd920d952ee8c517a12ed92035ec">STM32F103X_FLASH_PAGE_SIZE_U32</a>, const bool use_lock=true)</td></tr>
<tr class="memdesc:a9c62889652819a79b5c13ae5ba420e4c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Device flash end address (top, non-accessible)  <a href="classstm32f103x_1_1_flash.htm#a9c62889652819a79b5c13ae5ba420e4c">More...</a><br /></td></tr>
<tr class="separator:a9c62889652819a79b5c13ae5ba420e4c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad093d47da9fd7263da9d3764583d265b"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classstm32f103x_1_1_flash.htm#ad093d47da9fd7263da9d3764583d265b">Read</a> (const uint32_t *buffer, const uint32_t *data, const int16_t size_u32)</td></tr>
<tr class="memdesc:ad093d47da9fd7263da9d3764583d265b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Read page data starting at buffer to size_u32 into data.  <a href="classstm32f103x_1_1_flash.htm#ad093d47da9fd7263da9d3764583d265b">More...</a><br /></td></tr>
<tr class="separator:ad093d47da9fd7263da9d3764583d265b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1c8de17c4fa4107c20eb0b224223961f"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classstm32f103x_1_1_flash.htm#a1c8de17c4fa4107c20eb0b224223961f">Verify</a> (const uint32_t *buffer, const uint32_t *data, const int16_t size_u32)</td></tr>
<tr class="memdesc:a1c8de17c4fa4107c20eb0b224223961f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Verify given buffer in flash.  <a href="classstm32f103x_1_1_flash.htm#a1c8de17c4fa4107c20eb0b224223961f">More...</a><br /></td></tr>
<tr class="separator:a1c8de17c4fa4107c20eb0b224223961f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a804258faf428dd49582d8ec6e5cae82e"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classstm32f103x_1_1_flash.htm#a804258faf428dd49582d8ec6e5cae82e">Write32Buffer</a> (const uint32_t *buffer, const uint32_t *data, const int32_t size_u32)</td></tr>
<tr class="memdesc:a804258faf428dd49582d8ec6e5cae82e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Write buffer in 32bit words to flash.  <a href="classstm32f103x_1_1_flash.htm#a804258faf428dd49582d8ec6e5cae82e">More...</a><br /></td></tr>
<tr class="separator:a804258faf428dd49582d8ec6e5cae82e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae74270f7aeb82344e1eb5f431e91c880"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classstm32f103x_1_1_flash.htm#ae74270f7aeb82344e1eb5f431e91c880">Write32</a> (const uint32_t *address, const uint32_t data)</td></tr>
<tr class="memdesc:ae74270f7aeb82344e1eb5f431e91c880"><td class="mdescLeft">&#160;</td><td class="mdescRight">Write 32bit word to flash.  <a href="classstm32f103x_1_1_flash.htm#ae74270f7aeb82344e1eb5f431e91c880">More...</a><br /></td></tr>
<tr class="separator:ae74270f7aeb82344e1eb5f431e91c880"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3af52cdfd071fadcc2d8931b4fcccba0"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classstm32f103x_1_1_flash.htm#a3af52cdfd071fadcc2d8931b4fcccba0">Lock</a> ()</td></tr>
<tr class="memdesc:a3af52cdfd071fadcc2d8931b4fcccba0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Lock flash.  <a href="classstm32f103x_1_1_flash.htm#a3af52cdfd071fadcc2d8931b4fcccba0">More...</a><br /></td></tr>
<tr class="separator:a3af52cdfd071fadcc2d8931b4fcccba0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5c6a9abc8e87e70b79ed88742a1d55d2"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classstm32f103x_1_1_flash.htm#a5c6a9abc8e87e70b79ed88742a1d55d2">Unlock</a> ()</td></tr>
<tr class="memdesc:a5c6a9abc8e87e70b79ed88742a1d55d2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Unlock flash.  <a href="classstm32f103x_1_1_flash.htm#a5c6a9abc8e87e70b79ed88742a1d55d2">More...</a><br /></td></tr>
<tr class="separator:a5c6a9abc8e87e70b79ed88742a1d55d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a60d34d704dd82b75bee0ac51753c10be"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classstm32f103x_1_1_flash.htm#a60d34d704dd82b75bee0ac51753c10be">ErasePages</a> (const uint32_t *page_address, const int32_t pages, const uint32_t page_size_u32=<a class="el" href="stm32_2f103_2flash_8h.htm#a0a97cd920d952ee8c517a12ed92035ec">STM32F103X_FLASH_PAGE_SIZE_U32</a>)</td></tr>
<tr class="memdesc:a60d34d704dd82b75bee0ac51753c10be"><td class="mdescLeft">&#160;</td><td class="mdescRight">Erase N pages from given start location.  <a href="classstm32f103x_1_1_flash.htm#a60d34d704dd82b75bee0ac51753c10be">More...</a><br /></td></tr>
<tr class="separator:a60d34d704dd82b75bee0ac51753c10be"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a33fc05dc6f3a52563f93a844383c95c7"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classstm32f103x_1_1_flash.htm#a33fc05dc6f3a52563f93a844383c95c7">ErasePage</a> (const uint32_t *page_address, const uint32_t page_size_u32=<a class="el" href="stm32_2f103_2flash_8h.htm#a0a97cd920d952ee8c517a12ed92035ec">STM32F103X_FLASH_PAGE_SIZE_U32</a>)</td></tr>
<tr class="memdesc:a33fc05dc6f3a52563f93a844383c95c7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Erase page by given start location.  <a href="classstm32f103x_1_1_flash.htm#a33fc05dc6f3a52563f93a844383c95c7">More...</a><br /></td></tr>
<tr class="separator:a33fc05dc6f3a52563f93a844383c95c7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9caba271de41b3a4200047de89a1cefc"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classstm32f103x_1_1_flash.htm#a9caba271de41b3a4200047de89a1cefc">CheckErasePage</a> (const uint32_t *page_address, const uint32_t page_size_u32=<a class="el" href="stm32_2f103_2flash_8h.htm#a0a97cd920d952ee8c517a12ed92035ec">STM32F103X_FLASH_PAGE_SIZE_U32</a>)</td></tr>
<tr class="memdesc:a9caba271de41b3a4200047de89a1cefc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Check page is in erase state by given start location.  <a href="classstm32f103x_1_1_flash.htm#a9caba271de41b3a4200047de89a1cefc">More...</a><br /></td></tr>
<tr class="separator:a9caba271de41b3a4200047de89a1cefc"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-attribs"></a>
Static Public Attributes</h2></td></tr>
<tr class="memitem:a1f780a997370c2a3b33e1d47b3a0f72f"><td class="memItemLeft" align="right" valign="top"><a id="a1f780a997370c2a3b33e1d47b3a0f72f"></a>
static const uint32_t&#160;</td><td class="memItemRight" valign="bottom"><b>page_size</b> = <a class="el" href="stm32_2f103_2flash_8h.htm#af57c3bdb2065e8732fdb707e84dd3275">STM32F103X_FLASH_PAGE_SIZE</a></td></tr>
<tr class="separator:a1f780a997370c2a3b33e1d47b3a0f72f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6e99af74241f57c43806e0f4bb537e3f"><td class="memItemLeft" align="right" valign="top"><a id="a6e99af74241f57c43806e0f4bb537e3f"></a>
static const uint32_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classstm32f103x_1_1_flash.htm#a6e99af74241f57c43806e0f4bb537e3f">flash_size</a> = <a class="el" href="stm32_2f103_2flash_8h.htm#aba7adfe547ed83f5ece7594973d0e140">STM32F103X_FLASH_SIZE</a></td></tr>
<tr class="memdesc:a6e99af74241f57c43806e0f4bb537e3f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Device page size (Bytes) <br /></td></tr>
<tr class="separator:a6e99af74241f57c43806e0f4bb537e3f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5bafeba9755baef31425ee91b04911ed"><td class="memItemLeft" align="right" valign="top"><a id="a5bafeba9755baef31425ee91b04911ed"></a>
static uint32_t *const&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classstm32f103x_1_1_flash.htm#a5bafeba9755baef31425ee91b04911ed">flash_start</a> = reinterpret_cast&lt;uint32_t* const&gt;(<a class="el" href="stm32_2f103_2flash_8h.htm#a5acc3523b419bac488fd27109805a59f">STM32F103X_FLASH_SHADOW_START</a>)</td></tr>
<tr class="memdesc:a5bafeba9755baef31425ee91b04911ed"><td class="mdescLeft">&#160;</td><td class="mdescRight">Device flash size (Bytes), bank0 only. <br /></td></tr>
<tr class="separator:a5bafeba9755baef31425ee91b04911ed"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aeb648c76e79a25ffbefe028b09a9613e"><td class="memItemLeft" align="right" valign="top"><a id="aeb648c76e79a25ffbefe028b09a9613e"></a>
static uint32_t *const&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classstm32f103x_1_1_flash.htm#aeb648c76e79a25ffbefe028b09a9613e">flash_end</a> = static_cast&lt;uint32_t * const&gt;(<a class="el" href="classstm32f103x_1_1_flash.htm#a5bafeba9755baef31425ee91b04911ed">Flash::flash_start</a> + (<a class="el" href="classstm32f103x_1_1_flash.htm#a6e99af74241f57c43806e0f4bb537e3f">Flash::flash_size</a>&gt;&gt;2))</td></tr>
<tr class="memdesc:aeb648c76e79a25ffbefe028b09a9613e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Device flash start address. <br /></td></tr>
<tr class="separator:aeb648c76e79a25ffbefe028b09a9613e"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>A class offering internal NOR flash access via API for device STM32F103C8T6 Some of the source was referenced from Arduino Maple Mini Bootloader. </p>
<dl class="section attention"><dt>Attention</dt><dd>Ether use OpenSTM32 HAL or for Arduino install library Arduino_Core_STM32 <a href="https://github.com/stm32duino/Arduino_Core_STM32/">https://github.com/stm32duino/Arduino_Core_STM32/</a> </dd>
<dd>
Optionally define HAL_FLASH_MODULE_ENABLED macro to use this class </dd></dl>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a id="a9caba271de41b3a4200047de89a1cefc"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9caba271de41b3a4200047de89a1cefc">&#9670;&nbsp;</a></span>CheckErasePage()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static bool stm32f103x::Flash::CheckErasePage </td>
          <td>(</td>
          <td class="paramtype">const uint32_t *&#160;</td>
          <td class="paramname"><em>page_address</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint32_t&#160;</td>
          <td class="paramname"><em>page_size_u32</em> = <code><a class="el" href="stm32_2f103_2flash_8h.htm#a0a97cd920d952ee8c517a12ed92035ec">STM32F103X_FLASH_PAGE_SIZE_U32</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Check page is in erase state by given start location. </p>
<p>The start location lower bits are masked off to pageSize</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">page_address</td><td>Pointer to destination flash address, start of page </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">page_size_u32</td><td>Page size in sizeof(uint32_t) multiples, default <a class="el" href="stm32_2f103_2flash_8h.htm#a0a97cd920d952ee8c517a12ed92035ec">STM32F103X_FLASH_PAGE_SIZE_U32</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>bool Status </dd></dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">true</td><td>when page in erase state </td></tr>
    <tr><td class="paramname">false</td><td>not all page data in erase state </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a33fc05dc6f3a52563f93a844383c95c7"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a33fc05dc6f3a52563f93a844383c95c7">&#9670;&nbsp;</a></span>ErasePage()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static bool stm32f103x::Flash::ErasePage </td>
          <td>(</td>
          <td class="paramtype">const uint32_t *&#160;</td>
          <td class="paramname"><em>page_address</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint32_t&#160;</td>
          <td class="paramname"><em>page_size_u32</em> = <code><a class="el" href="stm32_2f103_2flash_8h.htm#a0a97cd920d952ee8c517a12ed92035ec">STM32F103X_FLASH_PAGE_SIZE_U32</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Erase page by given start location. </p>
<p>The start location lower bits are masked off to pageSize. <a class="el" href="classstm32f103x_1_1_flash.htm" title="A class offering internal NOR flash access via API for device STM32F103C8T6 Some of the source was re...">Flash</a> must be unlocked</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">page_address</td><td>Pointer to destination flash address, start of page </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">page_size_u32</td><td>Page size in sizeof(uint32_t) multiples, default <a class="el" href="stm32_2f103_2flash_8h.htm#a0a97cd920d952ee8c517a12ed92035ec">STM32F103X_FLASH_PAGE_SIZE_U32</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">true</td><td>on erase page success </td></tr>
    <tr><td class="paramname">false</td><td>erase failure </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a60d34d704dd82b75bee0ac51753c10be"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a60d34d704dd82b75bee0ac51753c10be">&#9670;&nbsp;</a></span>ErasePages()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static bool stm32f103x::Flash::ErasePages </td>
          <td>(</td>
          <td class="paramtype">const uint32_t *&#160;</td>
          <td class="paramname"><em>page_address</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32_t&#160;</td>
          <td class="paramname"><em>pages</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint32_t&#160;</td>
          <td class="paramname"><em>page_size_u32</em> = <code><a class="el" href="stm32_2f103_2flash_8h.htm#a0a97cd920d952ee8c517a12ed92035ec">STM32F103X_FLASH_PAGE_SIZE_U32</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Erase N pages from given start location. </p>
<p>The start location lower bits are masked off to pageSize. <a class="el" href="classstm32f103x_1_1_flash.htm" title="A class offering internal NOR flash access via API for device STM32F103C8T6 Some of the source was re...">Flash</a> must be unlocked</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">page_address</td><td>Pointer to destination flash address, start of page </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">pages</td><td>Count for erase </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">page_size_u32</td><td>Page size in sizeof(uint32_t) multiples, default <a class="el" href="stm32_2f103_2flash_8h.htm#a0a97cd920d952ee8c517a12ed92035ec">STM32F103X_FLASH_PAGE_SIZE_U32</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">true</td><td>erase success </td></tr>
    <tr><td class="paramname">false</td><td>erase failure </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a3af52cdfd071fadcc2d8931b4fcccba0"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a3af52cdfd071fadcc2d8931b4fcccba0">&#9670;&nbsp;</a></span>Lock()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static bool stm32f103x::Flash::Lock </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Lock flash. </p>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">true</td><td>locked </td></tr>
    <tr><td class="paramname">false</td><td>failed </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a9c62889652819a79b5c13ae5ba420e4c"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a9c62889652819a79b5c13ae5ba420e4c">&#9670;&nbsp;</a></span>Program()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static bool stm32f103x::Flash::Program </td>
          <td>(</td>
          <td class="paramtype">const uint32_t *&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint32_t *&#160;</td>
          <td class="paramname"><em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int16_t&#160;</td>
          <td class="paramname"><em>size_u32</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint32_t&#160;</td>
          <td class="paramname"><em>page_size_u32</em> = <code><a class="el" href="stm32_2f103_2flash_8h.htm#a0a97cd920d952ee8c517a12ed92035ec">STM32F103X_FLASH_PAGE_SIZE_U32</a></code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const bool&#160;</td>
          <td class="paramname"><em>use_lock</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Device flash end address (top, non-accessible) </p>
<p>Program N pages starting at buffer with given data to sizeU32. Will only program if data not already written and will only erase pages if they are not in erase state. Data written is verified as part of write. If start buffer location not paged aligned, extra pages will be erased.</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">buffer</td><td>Pointer to destination flash address of program </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">data</td><td>Pointer to data to write </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">size_u32</td><td>Data size of program / sizeof(uint32_t) </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">page_size_u32</td><td>Device page size, multiples of sizeof(uint32_t). Default <a class="el" href="stm32_2f103_2flash_8h.htm#a0a97cd920d952ee8c517a12ed92035ec">STM32F103X_FLASH_PAGE_SIZE_U32</a> </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">use_lock</td><td>Boolean controls flash unlock and locked state. If true will unlock and leave locked </td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">true</td><td>on program success </td></tr>
    <tr><td class="paramname">false</td><td>failure </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ad093d47da9fd7263da9d3764583d265b"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ad093d47da9fd7263da9d3764583d265b">&#9670;&nbsp;</a></span>Read()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static bool stm32f103x::Flash::Read </td>
          <td>(</td>
          <td class="paramtype">const uint32_t *&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint32_t *&#160;</td>
          <td class="paramname"><em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int16_t&#160;</td>
          <td class="paramname"><em>size_u32</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Read page data starting at buffer to size_u32 into data. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">buffer</td><td>Pointer to source flash address </td></tr>
    <tr><td class="paramdir">[out]</td><td class="paramname">data</td><td>Pointer to data, destination of read </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">size_u32</td><td>Data size / sizeof(uint32_t) </td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">true</td><td>on read success </td></tr>
    <tr><td class="paramname">false</td><td>on failure </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a5c6a9abc8e87e70b79ed88742a1d55d2"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a5c6a9abc8e87e70b79ed88742a1d55d2">&#9670;&nbsp;</a></span>Unlock()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static bool stm32f103x::Flash::Unlock </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Unlock flash. </p>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">true</td><td>unlocked </td></tr>
    <tr><td class="paramname">false</td><td>failed </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a1c8de17c4fa4107c20eb0b224223961f"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a1c8de17c4fa4107c20eb0b224223961f">&#9670;&nbsp;</a></span>Verify()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static bool stm32f103x::Flash::Verify </td>
          <td>(</td>
          <td class="paramtype">const uint32_t *&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint32_t *&#160;</td>
          <td class="paramname"><em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int16_t&#160;</td>
          <td class="paramname"><em>size_u32</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Verify given buffer in flash. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">buffer</td><td>Pointer to source flash address </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">data</td><td>Pointer to data to verify against </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">size_u32</td><td>Data size / sizeof(uint32_t) </td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">true</td><td>when data represents what is on media </td></tr>
    <tr><td class="paramname">false</td><td>one or more differences between data and media </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="ae74270f7aeb82344e1eb5f431e91c880"></a>
<h2 class="memtitle"><span class="permalink"><a href="#ae74270f7aeb82344e1eb5f431e91c880">&#9670;&nbsp;</a></span>Write32()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static bool stm32f103x::Flash::Write32 </td>
          <td>(</td>
          <td class="paramtype">const uint32_t *&#160;</td>
          <td class="paramname"><em>address</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint32_t&#160;</td>
          <td class="paramname"><em>data</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Write 32bit word to flash. </p>
<p><a class="el" href="classstm32f103x_1_1_flash.htm" title="A class offering internal NOR flash access via API for device STM32F103C8T6 Some of the source was re...">Flash</a> location prior must be in erase state and flash unlocked</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">address</td><td>Pointer to destination flash address </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">data</td><td>Source data </td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">true</td><td>write success </td></tr>
    <tr><td class="paramname">false</td><td>write failure </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a id="a804258faf428dd49582d8ec6e5cae82e"></a>
<h2 class="memtitle"><span class="permalink"><a href="#a804258faf428dd49582d8ec6e5cae82e">&#9670;&nbsp;</a></span>Write32Buffer()</h2>

<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static bool stm32f103x::Flash::Write32Buffer </td>
          <td>(</td>
          <td class="paramtype">const uint32_t *&#160;</td>
          <td class="paramname"><em>buffer</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint32_t *&#160;</td>
          <td class="paramname"><em>data</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int32_t&#160;</td>
          <td class="paramname"><em>size_u32</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Write buffer in 32bit words to flash. </p>
<p><a class="el" href="classstm32f103x_1_1_flash.htm" title="A class offering internal NOR flash access via API for device STM32F103C8T6 Some of the source was re...">Flash</a> location prior must be in erase state and flash unlocked</p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramdir">[in]</td><td class="paramname">buffer</td><td>Pointer to destination flash address </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">data</td><td>Pointer to source data </td></tr>
    <tr><td class="paramdir">[in]</td><td class="paramname">size_u32</td><td>Data size of program / sizeof(uint32_t) </td></tr>
  </table>
  </dd>
</dl>
<dl class="retval"><dt>Return values</dt><dd>
  <table class="retval">
    <tr><td class="paramname">true</td><td>write success </td></tr>
    <tr><td class="paramname">false</td><td>write failure </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
</div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><b>stm32f103x</b></li><li class="navelem"><a class="el" href="classstm32f103x_1_1_flash.htm">Flash</a></li>
    <li class="footer">Generated on Mon Jan 1 2024 16:52:56 for ArduinoPStruct by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.17 </li>
  </ul>
</div>
</body>
</html>
